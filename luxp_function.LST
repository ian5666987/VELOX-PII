C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE LUXP_FUNCTION
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE luxp_function.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

*** WARNING C500 IN LINE 1 OF LUXP_FUNCTION.C: LICENSE ERROR (R20D: CONTENT ERROR IN FLF FILE)

   1          //------------------------------------------------------------------------------------
   2          // Luxp_function.c
   3          //------------------------------------------------------------------------------------
   4          // Copyright (C) 2013 Nanyang Technological University.
   5          //
   6          // AUTH: IAN
   7          // DATE: 03 APR 2013
   8          //
   9          // The program Luxp_function.c will be downloaded to the Pumpkin Motherboard with 
  10          // C8051F120 uC as part of the VELOX-P Pico-Satellite Flight Software. 
  11          //
  12          // Target: C8051F120
  13          //
  14          //------------------------------------------------------------------------------------
  15          
  16          //------------------------------------------------------------------------------------
  17          // Includes
  18          //------------------------------------------------------------------------------------
  19          #include <luxp_function.h>
  20          
  21          //------------------------------------------------------------------------------------
  22          // Call function
  23          //------------------------------------------------------------------------------------
  24          // Function's test result: untested
  25          //------------------------------------------------------------------------------------
  26          unsigned short functionModule (unsigned char *l_uc_call_function_pointer, unsigned char *l_uc_response_fun
             -ction_pointer)
  27          {
  28   1              //All local variables
  29   1              //l_uc_counter is removed as it no longer been used (20120328)
  30   1              //l_us_msg_length is removed as it is only assigned once but no longer been used (20120328)
  31   1              //l_us_checksum_bytes, l_us_checksum_bytes_msg, & l_ul_checksum_bytes are no longer used and removed (201
             -20328)
  32   1              //For design consistency, l_us_send_options_bytes is removed as earlier it is put only to ease the progra
             -mmer to read
  33   1              // the option bytes separately from send option command (20120328)
  34   1              unsigned char *l_uc_arg_p;
  35   1              unsigned char l_uc_command_header_byte;
  36   1              unsigned char l_uc_command_tail_byte;
  37   1              unsigned short l_us_arg_length;
  38   1              unsigned short l_us_arg[2] = 0;
  39   1              unsigned short l_us_res_length = 0x0001;
  40   1              unsigned short l_us_counter;
  41   1              unsigned short l_us_error_code = EC_INIT;
  42   1              char SFRPAGE_SAVE = SFRPAGE;
  43   1      
  44   1              l_uc_command_header_byte        = *(l_uc_call_function_pointer+1);
  45   1              l_uc_command_tail_byte          = *(l_uc_call_function_pointer+2);
  46   1              l_us_arg_length                         = (unsigned short)(*(l_uc_call_function_pointer+3) << 8) + *(l_uc_call_function_pointe
             -r+4);
  47   1              l_uc_arg_p                                      = l_uc_call_function_pointer+5;
  48   1      
  49   1              //Assume successful unless stated otherwise
  50   1              g_us_function_module_error_code = EC_SUCCESSFUL;
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 2   

  51   1      
  52   1              switch (l_uc_command_header_byte){
  53   2      
  54   2                      #if (ISIS_CMD_ENABLE == 1)
  55   2                      //Communication with IMC board
  56   2                      case IMC_ADDR:
  57   2                              switch (l_uc_command_tail_byte){
  58   3      
  59   3                                      case IMC_I2C_RESET:
  60   3                                      case IMC_I2C_RMV_FR:
  61   3                                              g_us_error_code = isisI2C(IMC_ADDR,l_uc_command_tail_byte,DEBUGGING_FEATURE);
  62   3                                              g_us_function_module_error_code = g_us_error_code;
  63   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
  64   3                                              break;
  65   3      
  66   3                                      case IMC_I2C_GET_NOFR:
  67   3                                      case IMC_I2C_GET_FR:
  68   3                                      case IMC_I2C_REC_DOFF:
  69   3                                      case IMC_I2C_REC_SSTR:
  70   3                                      case IMC_I2C_TRN_RPOW:
  71   3                                      case IMC_I2C_TRN_FPOW:
  72   3                                      case IMC_I2C_TRN_ICON:
  73   3                                      case IMC_I2C_REC_ICON:
  74   3                                      case IMC_I2C_POW_AMPT:
  75   3                                      case IMC_I2C_POW_BUSV:
  76   3                                      case IMC_I2C_POW_BUSV_ICON:
  77   3                                      case IMC_I2C_REC_UPTM:
  78   3                                              g_us_error_code = isisI2C(IMC_ADDR,l_uc_command_tail_byte,DEBUGGING_FEATURE);
  79   3                                              g_us_function_module_error_code = g_us_error_code;
  80   3                                              l_us_res_length = sendOptions(0x000F,l_uc_response_function_pointer); //Send: error code, data out, d
             -ata in, time taken
  81   3                                              break;
  82   3      
  83   3                                      default:
  84   3                                              #if (DEBUGGING_FEATURE == 1)
  85   3                                              //Debugging block
  86   3                                              //----------------
  87   3                                              startTiming();
  88   3                                              //----------------
  89   3                                              //Debugging block
  90   3                                              #endif
  91   3      
  92   3                                              g_us_error_code = EC_IMC_COMMAND_NOT_FOUND;
  93   3                                              g_us_function_module_error_code = g_us_error_code;
  94   3      
  95   3                                              #if (DEBUGGING_FEATURE == 1)
  96   3                                              //Debugging block
  97   3                                              //----------------
  98   3                                              endTiming();
  99   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 100   3                                              //----------------
 101   3                                              //Debugging block
 102   3                                              #endif                                                                          
 103   3                                              break;
 104   3                              }
 105   2                              break; 
 106   2      
 107   2                      //Communication with ITC board
 108   2                      case ITC_ADDR:
 109   2                              switch (l_uc_command_tail_byte){
 110   3                                      case ITC_I2C_RESET:
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 3   

 111   3                                              g_us_error_code = isisI2C(ITC_ADDR,l_uc_command_tail_byte,DEBUGGING_FEATURE);
 112   3                                              g_us_function_module_error_code = g_us_error_code;
 113   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 114   3                                              break;
 115   3      
 116   3                                      case ITC_I2C_SND_AX_FR_DFLT:
 117   3                                              #if (DEBUGGING_FEATURE == 1)
 118   3                                              //Overwrite AX.25 buffer
 119   3                                              for (l_us_counter = 0; l_us_counter < l_us_arg_length; l_us_counter++)
 120   3                                                      g_uc_ax25_message[l_us_counter] = *(l_uc_arg_p + l_us_counter);
 121   3                                              #endif
 122   3                                              g_us_error_code = isisI2CMsg(l_uc_command_tail_byte,0,l_us_arg_length,DEBUGGING_FEATURE);
 123   3                                              g_us_function_module_error_code = g_us_error_code;
 124   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 125   3                                              break;
 126   3      
 127   3                                      case ITC_I2C_SND_AX_FR_OVRD:
 128   3                                              #if (DEBUGGING_FEATURE == 1)
 129   3                                              //Overwrite AX.25 FROM-TO callsign buffer
 130   3                                              for (l_us_counter = 0; l_us_counter < AX25_CALLSIGN_SIZE; l_us_counter++)
 131   3                                                      g_uc_from_to_callsign[l_us_counter] = *(l_uc_arg_p + l_us_counter);
 132   3                                              //Overwrite AX.25 buffer
 133   3                                              for (l_us_counter = AX25_CALLSIGN_SIZE; l_us_counter < l_us_arg_length; l_us_counter++)
 134   3                                                      g_uc_ax25_message[l_us_counter-AX25_CALLSIGN_SIZE] = *(l_uc_arg_p + l_us_counter);
 135   3                                              #endif
 136   3                                              g_us_error_code = isisI2CMsg(l_uc_command_tail_byte,0,l_us_arg_length-AX25_CALLSIGN_SIZE,DEBUGGING_FE
             -ATURE);
 137   3                                              g_us_function_module_error_code = g_us_error_code;
 138   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 139   3                                              break;
 140   3      
 141   3                                      case ITC_I2C_SND_CW_MSG:
 142   3                                              #if (DEBUGGING_FEATURE == 1)
 143   3                                              //Overwrite CW/Morse buffer
 144   3                                              for (l_us_counter = 0; l_us_counter < l_us_arg_length; l_us_counter++)
 145   3                                                      g_uc_cw_message[l_us_counter] = *(l_uc_arg_p + l_us_counter);
 146   3                                              #endif
 147   3                                              g_us_error_code = isisI2CMsg(l_uc_command_tail_byte,0,l_us_arg_length,DEBUGGING_FEATURE);
 148   3                                              g_us_function_module_error_code = g_us_error_code;
 149   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 150   3                                              break;
 151   3      
 152   3                                      case ITC_I2C_SET_AX_BCN_DFLT:
 153   3                                              //Prepare beacon period
 154   3                                              l_us_arg[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p + 1);
 155   3                                              #if (DEBUGGING_FEATURE == 1)
 156   3                                              //Overwrite AX.25 buffer
 157   3                                              for (l_us_counter = 2; l_us_counter < l_us_arg_length+2; l_us_counter++)
 158   3                                                      g_uc_ax25_message[l_us_counter-2] = *(l_uc_arg_p + l_us_counter);
 159   3                                              #endif
 160   3                                              g_us_error_code = isisI2CMsg(l_uc_command_tail_byte,l_us_arg[0],l_us_arg_length-2,DEBUGGING_FEATURE);
 161   3                                              g_us_function_module_error_code = g_us_error_code;
 162   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 163   3                                              break;
 164   3      
 165   3                                      case ITC_I2C_SET_AX_BCN_OVRD:
 166   3                                              //Prepare beacon period
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 4   

 167   3                                              l_us_arg[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p + 1);
 168   3                                              #if (DEBUGGING_FEATURE == 1)
 169   3                                              //Overwrite AX.25 FROM-TO callsign buffer
 170   3                                              for (l_us_counter = 2; l_us_counter < AX25_CALLSIGN_SIZE+2; l_us_counter++)
 171   3                                                      g_uc_from_to_callsign[l_us_counter-2] = *(l_uc_arg_p + l_us_counter);
 172   3                                              //Overwrite AX.25 buffer
 173   3                                              for (l_us_counter = AX25_CALLSIGN_SIZE+2; l_us_counter < l_us_arg_length; l_us_counter++)
 174   3                                                      g_uc_ax25_message[l_us_counter-AX25_CALLSIGN_SIZE-2] = *(l_uc_arg_p + l_us_counter);
 175   3                                              #endif
 176   3                                              g_us_error_code = isisI2CMsg(l_uc_command_tail_byte,l_us_arg[0],l_us_arg_length-AX25_CALLSIGN_SIZE-2,
             -DEBUGGING_FEATURE);
 177   3                                              g_us_function_module_error_code = g_us_error_code;
 178   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 179   3                                              break;
 180   3      
 181   3                                      case ITC_I2C_SET_CW_BCN:
 182   3                                              //Prepare beacon period
 183   3                                              l_us_arg[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p + 1);
 184   3                                              #if (DEBUGGING_FEATURE == 1)
 185   3                                              //Overwrite CW/Morse buffer
 186   3                                              for (l_us_counter = 2; l_us_counter < l_us_arg_length; l_us_counter++)
 187   3                                                      g_uc_cw_message[l_us_counter-2] = *(l_uc_arg_p + l_us_counter);
 188   3                                              #endif
 189   3                                              g_us_error_code = isisI2CMsg(l_uc_command_tail_byte,l_us_arg[0],l_us_arg_length-2,DEBUGGING_FEATURE);
 190   3                                              g_us_function_module_error_code = g_us_error_code;
 191   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 192   3                                              break;
 193   3      
 194   3                                      case ITC_I2C_CLR_BCN:
 195   3                                              g_us_error_code = isisI2C(ITC_ADDR,l_uc_command_tail_byte,DEBUGGING_FEATURE);
 196   3                                              g_us_function_module_error_code = g_us_error_code;
 197   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 198   3                                              break;
 199   3      
 200   3                                      case ITC_I2C_SET_DFLT_AX_TO:
 201   3                                              #if (DEBUGGING_FEATURE == 1)
 202   3                                              //Change AX.25 TO callsign
 203   3                                              for (l_us_counter = 0; l_us_counter < 7; l_us_counter++)
 204   3                                                      g_uc_from_to_callsign[l_us_counter+7] = *(l_uc_arg_p + l_us_counter);
 205   3                                              #endif
 206   3                                              g_us_error_code = isisI2CMsg(l_uc_command_tail_byte,0,0,DEBUGGING_FEATURE);
 207   3                                              g_us_function_module_error_code = g_us_error_code;
 208   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 209   3                                              break;
 210   3      
 211   3                                      case ITC_I2C_SET_DFLT_AX_FROM:
 212   3                                              #if (DEBUGGING_FEATURE == 1)
 213   3                                              //Change AX.25 FROM callsign
 214   3                                              for (l_us_counter = 0; l_us_counter < 7; l_us_counter++)
 215   3                                                      g_uc_from_to_callsign[l_us_counter] = *(l_uc_arg_p + l_us_counter);
 216   3                                              #endif
 217   3                                              g_us_error_code = isisI2CMsg(l_uc_command_tail_byte,0,0,DEBUGGING_FEATURE);
 218   3                                              g_us_function_module_error_code = g_us_error_code;
 219   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 220   3                                              break;
 221   3      
 222   3                                      case ITC_I2C_SET_TRN_IDLE:
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 5   

 223   3                                      case ITC_I2C_SET_TRN_OUTM:
 224   3                                      case ITC_I2C_SET_AX_TRN_BRT:
 225   3                                              //Prepare transmitter idle state/transmitter output mode/transmitter ax25 bitrate parameter
 226   3                                              l_us_arg[0] = *l_uc_arg_p;
 227   3                                              g_us_error_code = isisI2CPar(l_uc_command_tail_byte,l_us_arg[0],DEBUGGING_FEATURE);
 228   3                                              g_us_function_module_error_code = g_us_error_code;
 229   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 230   3                                              break;
 231   3      
 232   3                                      case ITC_I2C_SET_CW_CHAR_RT:
 233   3                                              //Prepare transmitter cw char rate value (dot(s)/s) parameter
 234   3                                              l_us_arg[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p + 1);
 235   3                                              g_us_error_code = isisI2CPar(l_uc_command_tail_byte,l_us_arg[0],DEBUGGING_FEATURE);
 236   3                                              g_us_function_module_error_code = g_us_error_code;
 237   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 238   3                                              break;
 239   3      
 240   3                                      case ITC_I2C_TRN_UPTM:
 241   3                                      case ITC_I2C_TRN_STATE:
 242   3                                              g_us_error_code = isisI2C(ITC_ADDR,l_uc_command_tail_byte,DEBUGGING_FEATURE);
 243   3                                              g_us_function_module_error_code = g_us_error_code;
 244   3                                              l_us_res_length = sendOptions(0x000F,l_uc_response_function_pointer); //Send: error code, data out, d
             -ata in, time taken
 245   3                                              break;
 246   3      
 247   3                                      default:
 248   3                                              #if (DEBUGGING_FEATURE == 1)
 249   3                                              //Debugging block
 250   3                                              //----------------
 251   3                                              startTiming();
 252   3                                              //----------------
 253   3                                              //Debugging block
 254   3                                              #endif
 255   3      
 256   3                                              g_us_error_code = EC_ITC_COMMAND_NOT_FOUND;
 257   3                                              g_us_function_module_error_code = g_us_error_code;
 258   3      
 259   3                                              #if (DEBUGGING_FEATURE == 1)
 260   3                                              //Debugging block
 261   3                                              //----------------
 262   3                                              endTiming();
 263   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 264   3                                              //----------------
 265   3                                              //Debugging block
 266   3                                              #endif                                                                          
 267   3                                              break;
 268   3                              }
 269   2                              break;
 270   2      
 271   2                      #endif
 272   2      
 273   2                      #if (ADCS_CMD_ENABLE == 1)
 274   2                      //Communication with ADCS board
 275   2                      case ADCS_ADDR:
 276   2                              switch (l_uc_command_tail_byte){
 277   3      
 278   3                                      case ADCS_I2C_GET_HK:
 279   3                                      case ADCS_I2C_GET_SSCP:
 280   3                                      case ADCS_I2C_SET_STANDBY:
 281   3                                      case ADCS_I2C_SET_SELFTEST:
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 6   

 282   3                                              g_us_error_code = adcsI2C(l_uc_command_tail_byte,DEBUGGING_FEATURE);
 283   3                                              g_us_function_module_error_code = g_us_error_code;
 284   3                                              l_us_res_length = sendOptions(0x000F,l_uc_response_function_pointer); //Send: error code, data out, d
             -ata in, time taken
 285   3                                              break;
 286   3      
 287   3                                      case ADCS_I2C_SET_GPS_ON:
 288   3                                      case ADCS_I2C_SET_GPS_OFF:
 289   3                                      case ADCS_I2C_RESET_SW:
 290   3                                      case ADCS_I2C_RESET_HW:
 291   3                                              g_us_error_code = adcsI2C(l_uc_command_tail_byte,DEBUGGING_FEATURE);
 292   3                                              g_us_function_module_error_code = g_us_error_code;
 293   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 294   3                                              break;
 295   3      
 296   3                                      case ADCS_I2C_GET_DATA:
 297   3                                              #if (DEBUGGING_FEATURE == 1)
 298   3                                              g_us_error_code = adcsGetData(*l_uc_arg_p,DEBUGGING_FEATURE);
 299   3                                              #else
                                                      g_us_error_code = adcsGetData(*l_uc_arg_p);
                                                      #endif
 302   3                                              g_us_function_module_error_code = g_us_error_code;
 303   3                                              l_us_res_length = sendOptions(0x000F,l_uc_response_function_pointer); //Send: error code, data out, d
             -ata in, time taken
 304   3                                              break;
 305   3      
 306   3                                      case ADCS_I2C_SET_MODE:
 307   3                                              l_us_arg[0] = (unsigned short)((*(l_uc_arg_p+1)) << 8) + *(l_uc_arg_p + 2);
 308   3                                              #if (DEBUGGING_FEATURE == 1)
 309   3                                              g_us_error_code = adcsSetMode(*l_uc_arg_p,l_us_arg[0],DEBUGGING_FEATURE);
 310   3                                              #else
                                                      g_us_error_code = adcsSetMode(*l_uc_arg_p,l_us_arg[0]);
                                                      #endif
 313   3                                              g_us_function_module_error_code = g_us_error_code;
 314   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 315   3                                              break;
 316   3      
 317   3                                      case ADCS_I2C_SET_SS_THRESHOLD:
 318   3                                              l_us_arg[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p + 1);
 319   3                                              #if (DEBUGGING_FEATURE == 1)
 320   3                                              g_us_error_code = adcsSetSSThreshold((short)l_us_arg[0],DEBUGGING_FEATURE);
 321   3                                              #else
                                                      g_us_error_code = adcsSetSSThreshold((short)l_us_arg[0]);
                                                      #endif
 324   3                                              g_us_function_module_error_code = g_us_error_code;
 325   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 326   3                                              break;
 327   3      
 328   3                                      case ADCS_I2C_SET_CGAIN:
 329   3                                              #if (DEBUGGING_FEATURE == 1)
 330   3                                              //Update ADCS Gain
 331   3                                              for (l_us_counter = 0; l_us_counter < NO_OF_ADCS_CGAIN; l_us_counter++)
 332   3                                                      str_adcs_par.f_cgain[l_us_counter] = uchar2float(*(l_uc_arg_p + l_us_counter*4),*(l_uc_arg_p + l_us_
             -counter*4 + 1),*(l_uc_arg_p + l_us_counter*4 + 2),*(l_uc_arg_p + l_us_counter*4 + 3));
 333   3                                              #endif
 334   3                                              #if (DEBUGGING_FEATURE == 1)
 335   3                                              g_us_error_code = adcsSetCGain(DEBUGGING_FEATURE);
 336   3                                              #else
                                                      g_us_error_code = adcsSetCGain();
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 7   

                                                      #endif
 339   3                                              g_us_function_module_error_code = g_us_error_code;
 340   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 341   3                                              break;
 342   3      
 343   3                                      case ADCS_I2C_SET_TLE:
 344   3                                              #if (DEBUGGING_FEATURE == 1)
 345   3                                              //Update ADCS TLE
 346   3                                              str_adcs_par.f_tle_epoch = uchar2float(*l_uc_arg_p,*(l_uc_arg_p + 1),*(l_uc_arg_p + 2),*(l_uc_arg_p +
             - 3));
 347   3                                              str_adcs_par.f_tle_inc = uchar2float(*(l_uc_arg_p + 4),*(l_uc_arg_p + 5),*(l_uc_arg_p + 6),*(l_uc_arg
             -_p + 7));
 348   3                                              str_adcs_par.f_tle_raan = uchar2float(*(l_uc_arg_p + 8),*(l_uc_arg_p + 9),*(l_uc_arg_p + 10),*(l_uc_a
             -rg_p + 11));
 349   3                                              str_adcs_par.f_tle_arg_per = uchar2float(*(l_uc_arg_p + 12),*(l_uc_arg_p + 13),*(l_uc_arg_p + 14),*(l
             -_uc_arg_p + 15));
 350   3                                              str_adcs_par.f_tle_ecc = uchar2float(*(l_uc_arg_p + 16),*(l_uc_arg_p + 17),*(l_uc_arg_p + 18),*(l_uc_
             -arg_p + 19));
 351   3                                              str_adcs_par.f_tle_ma = uchar2float(*(l_uc_arg_p + 20),*(l_uc_arg_p + 21),*(l_uc_arg_p + 22),*(l_uc_a
             -rg_p + 23));
 352   3                                              str_adcs_par.us_tle_mm = (unsigned short)((*(l_uc_arg_p+24)) << 8) + *(l_uc_arg_p + 25);
 353   3                                              #endif
 354   3                                              #if (DEBUGGING_FEATURE == 1)
 355   3                                              g_us_error_code = adcsSetTLE(DEBUGGING_FEATURE);
 356   3                                              #else
                                                      g_us_error_code = adcsSetTLE();
                                                      #endif
 359   3                                              g_us_function_module_error_code = g_us_error_code;
 360   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 361   3                                              break;
 362   3      
 363   3                                      case ADCS_I2C_SET_TIME:
 364   3                                              #if (DEBUGGING_FEATURE == 1)
 365   3                                              g_us_error_code = adcsSetTime(uchar2ulong(*l_uc_arg_p,*(l_uc_arg_p + 1),*(l_uc_arg_p + 2),*(l_uc_arg_
             -p + 3)),DEBUGGING_FEATURE);
 366   3                                              #else
                                                      g_us_error_code = adcsSetTime(uchar2ulong(*l_uc_arg_p,*(l_uc_arg_p + 1),*(l_uc_arg_p + 2),*(l_uc_arg_
             -p + 3)));
                                                      #endif
 369   3                                              g_us_function_module_error_code = g_us_error_code;
 370   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 371   3                                              break;
 372   3      
 373   3                                      case ADCS_I2C_SET_VECTOR_ALIGN2SUN:
 374   3                                              #if (DEBUGGING_FEATURE == 1)
 375   3                                              //Update ADCS vector align to sun
 376   3                                              str_adcs_par.s_vector_2sun[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p+1);
 377   3                                              str_adcs_par.s_vector_2sun[1] = (unsigned short)((*(l_uc_arg_p+2)) << 8) + *(l_uc_arg_p+3);
 378   3                                              str_adcs_par.s_vector_2sun[2] = (unsigned short)((*(l_uc_arg_p+4)) << 8) + *(l_uc_arg_p+5);
 379   3                                              #endif
 380   3                                              #if (DEBUGGING_FEATURE == 1)
 381   3                                              g_us_error_code = adcsSetVectorAlignToSun(DEBUGGING_FEATURE);
 382   3                                              #else
                                                      g_us_error_code = adcsSetVectorAlignToSun();
                                                      #endif
 385   3                                              g_us_function_module_error_code = g_us_error_code;
 386   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 387   3                                              break;
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 8   

 388   3      
 389   3                                      case ADCS_I2C_SET_TOGGLE_IMU:
 390   3                                              #if (DEBUGGING_FEATURE == 1)
 391   3                                              g_us_error_code = adcsToggleIMU(*l_uc_arg_p,DEBUGGING_FEATURE);
 392   3                                              #else
                                                      g_us_error_code = adcsToggleIMU(*l_uc_arg_p);
                                                      #endif
 395   3                                              g_us_function_module_error_code = g_us_error_code;
 396   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 397   3                                              break;
 398   3      
 399   3                                      case ADCS_I2C_SET_BODY_RATE:
 400   3                                              #if (DEBUGGING_FEATURE == 1)
 401   3                                              g_us_error_code = adcsSetBodyRate(*l_uc_arg_p,*(l_uc_arg_p+1),*(l_uc_arg_p+2),DEBUGGING_FEATURE);
 402   3                                              #else
                                                      g_us_error_code = adcsSetBodyRate(*l_uc_arg_p,*(l_uc_arg_p+1),*(l_uc_arg_p+2));
                                                      #endif
 405   3                                              g_us_function_module_error_code = g_us_error_code;
 406   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer);
 407   3                                              break;
 408   3      
 409   3                                      case ADCS_I2C_SET_DGAIN:
 410   3                                              l_us_arg[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p+1);
 411   3                                              #if (DEBUGGING_FEATURE == 1)
 412   3                                              g_us_error_code = adcsSetDGain((short)l_us_arg[0],DEBUGGING_FEATURE);
 413   3                                              #else
                                                      g_us_error_code = adcsSetDGain((short)l_us_arg[0]);
                                                      #endif
 416   3                                              g_us_function_module_error_code = g_us_error_code;
 417   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 418   3                                              break;
 419   3      
 420   3                                      default:
 421   3                                              #if (DEBUGGING_FEATURE == 1)
 422   3                                              //Debugging block
 423   3                                              //----------------
 424   3                                              startTiming();
 425   3                                              //----------------
 426   3                                              //Debugging block
 427   3                                              #endif
 428   3      
 429   3                                              g_us_error_code = EC_ADCS_COMMAND_NOT_FOUND;
 430   3                                              g_us_function_module_error_code = g_us_error_code;
 431   3      
 432   3                                              #if (DEBUGGING_FEATURE == 1)
 433   3                                              //Debugging block
 434   3                                              //----------------
 435   3                                              endTiming();
 436   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 437   3                                              //----------------
 438   3                                              //Debugging block
 439   3                                              #endif                                                                          
 440   3                                              break;
 441   3                              }
 442   2                              break;
 443   2      
 444   2                      #endif
 445   2      
 446   2                      #if (PWRS_CMD_ENABLE == 1)
 447   2                      //Communication with PWRS board
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 9   

 448   2                      case PWRS_ADDR:
 449   2                              switch (l_uc_command_tail_byte){
 450   3                                      case PWRS_I2C_GET_HK:
 451   3                                      case PWRS_I2C_GET_SSCP:
 452   3                                              g_us_error_code = pwrsI2C(l_uc_command_tail_byte,DEBUGGING_FEATURE);
 453   3                                              g_us_function_module_error_code = g_us_error_code;
 454   3                                              l_us_res_length = sendOptions(0x000F,l_uc_response_function_pointer); //Send: error code, data out, d
             -ata in, time taken
 455   3                                              break;
 456   3      
 457   3                                      case PWRS_I2C_GET_DATA:
 458   3                                              #if (DEBUGGING_FEATURE == 1)
 459   3                                              g_us_error_code = pwrsGetData(*l_uc_arg_p,DEBUGGING_FEATURE);
 460   3                                              #else
                                                      g_us_error_code = pwrsGetData(*l_uc_arg_p);
                                                      #endif
 463   3                                              g_us_function_module_error_code = g_us_error_code;
 464   3                                              l_us_res_length = sendOptions(0x000F,l_uc_response_function_pointer); //Send: error code, data out, d
             -ata in, time taken
 465   3                                              break;
 466   3      
 467   3                                      case PWRS_I2C_SET_HT:
 468   3                                              #if (DEBUGGING_FEATURE == 1)
 469   3                                              g_us_error_code = pwrsUpdateBatteryHeater(*l_uc_arg_p,DEBUGGING_FEATURE);
 470   3                                              #else
                                                      g_us_error_code = pwrsUpdateBatteryHeater(*l_uc_arg_p);
                                                      #endif
 473   3                                              g_us_function_module_error_code = g_us_error_code;
 474   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 475   3                                              break;
 476   3      
 477   3                                      case PWRS_I2C_SET_OUTPUT:
 478   3                                              #if (DEBUGGING_FEATURE == 1)
 479   3                                              g_us_error_code = pwrsSetOutput(*l_uc_arg_p,DEBUGGING_FEATURE);
 480   3                                              #else
                                                      g_us_error_code = pwrsSetOutput(*l_uc_arg_p);
                                                      #endif
 483   3                                              g_us_function_module_error_code = g_us_error_code;
 484   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 485   3                                              break;
 486   3      
 487   3                                      case PWRS_I2C_SET_SINGLE_OUTPUT:
 488   3                                              //Set delay time
 489   3                                              l_us_arg[0] = (unsigned short)((*(l_uc_arg_p+2)) << 8) + *(l_uc_arg_p+3);
 490   3                                              #if (DEBUGGING_FEATURE == 1)
 491   3                                              g_us_error_code = pwrsSetSingleOutput(*l_uc_arg_p,*(l_uc_arg_p+1),l_us_arg[0],DEBUGGING_FEATURE);
 492   3                                              #else
                                                      g_us_error_code = pwrsSetSingleOutput(*l_uc_arg_p,*(l_uc_arg_p+1),l_us_arg[0]);
                                                      #endif
 495   3                                              g_us_function_module_error_code = g_us_error_code;
 496   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 497   3                                              break;
 498   3      
 499   3                                      case PWRS_I2C_SET_MPPT_MODE:
 500   3                                              #if (DEBUGGING_FEATURE == 1)
 501   3                                              g_us_error_code = pwrsSetMPPTMode(*l_uc_arg_p,DEBUGGING_FEATURE);
 502   3                                              #else
                                                      g_us_error_code = pwrsSetMPPTMode(*l_uc_arg_p);
                                                      #endif
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 10  

 505   3                                              g_us_function_module_error_code = g_us_error_code;
 506   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 507   3                                              break;
 508   3      
 509   3                                      case PWRS_I2C_SET_PV_VOLT:
 510   3                                              #if (DEBUGGING_FEATURE == 1)
 511   3                                              //Set PV volt
 512   3                                              str_pwrs_data.us_pv_fv[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p+1);
 513   3                                              str_pwrs_data.us_pv_fv[1] = (unsigned short)((*(l_uc_arg_p+2)) << 8) + *(l_uc_arg_p+3);
 514   3                                              str_pwrs_data.us_pv_fv[2] = (unsigned short)((*(l_uc_arg_p+4)) << 8) + *(l_uc_arg_p+5);
 515   3                                              #endif
 516   3                                              #if (DEBUGGING_FEATURE == 1)
 517   3                                              g_us_error_code = pwrsSetPVVolt(DEBUGGING_FEATURE);
 518   3                                              #else
                                                      g_us_error_code = pwrsSetPVVolt();
                                                      #endif
 521   3                                              g_us_function_module_error_code = g_us_error_code;
 522   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 523   3                                              break;
 524   3      
 525   3                                      case PWRS_I2C_SET_TK_OUTPUT:
 526   3                                              //Set delay time
 527   3                                              l_us_arg[0] = (unsigned short)((*(l_uc_arg_p+2)) << 8) + *(l_uc_arg_p+3);
 528   3                                              #if (DEBUGGING_FEATURE == 1)
 529   3                                              g_us_error_code = pwrsSetTKOutput(*l_uc_arg_p,*(l_uc_arg_p+1),l_us_arg[0],DEBUGGING_FEATURE);
 530   3                                              #else
                                                      g_us_error_code = pwrsSetTKOutput(*l_uc_arg_p,*(l_uc_arg_p+1),l_us_arg[0]);
                                                      #endif
 533   3                                              g_us_function_module_error_code = g_us_error_code;
 534   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 535   3                                              break;
 536   3      
 537   3                                      case PWRS_I2C_RESET_PWRS:
 538   3                                              //Set delay time
 539   3                                              l_us_arg[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p+1);
 540   3                                              #if (DEBUGGING_FEATURE == 1)
 541   3                                              g_us_error_code = pwrsResetPWRS(l_us_arg[0],DEBUGGING_FEATURE);
 542   3                                              #else
                                                      g_us_error_code = pwrsResetPWRS(l_us_arg[0]);
                                                      #endif
 545   3                                              g_us_function_module_error_code = g_us_error_code;
 546   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 547   3                                              break;
 548   3      
 549   3                                      case PWRS_I2C_RESET_OBDH:
 550   3                                              //Set delay time
 551   3                                              l_us_arg[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p+1);
 552   3                                              #if (DEBUGGING_FEATURE == 1)
 553   3                                              g_us_error_code = pwrsResetOBDH(l_us_arg[0],DEBUGGING_FEATURE);
 554   3                                              #else
                                                      g_us_error_code = pwrsResetOBDH(l_us_arg[0]);
                                                      #endif
 557   3                                              g_us_function_module_error_code = g_us_error_code;
 558   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 559   3                                              break;
 560   3      
 561   3                                      case PWRS_I2C_SET_SOC_LIMIT:
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 11  

 562   3                                              //Set SOC ON and OFF limit
 563   3                                              #if (DEBUGGING_FEATURE == 1)
 564   3                                              g_us_error_code = pwrsSetSOCLimit(*l_uc_arg_p,*(l_uc_arg_p+1),DEBUGGING_FEATURE);
 565   3                                              #else
                                                      g_us_error_code = pwrsSetSOCLimit(*l_uc_arg_p,*(l_uc_arg_p+1));
                                                      #endif
 568   3                                              g_us_function_module_error_code = g_us_error_code;
 569   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 570   3                                              break;
 571   3      
 572   3                                      case PWRS_I2C_SET_WDT_LIMIT:
 573   3                                              //Set WDT time limit
 574   3                                              #if (DEBUGGING_FEATURE == 1)
 575   3                                              g_us_error_code = pwrsSetWDTLimit(uchar2ulong(*l_uc_arg_p,*(l_uc_arg_p+1),*(l_uc_arg_p+2),*(l_uc_arg_
             -p+3)),DEBUGGING_FEATURE);
 576   3                                              #else
                                                      g_us_error_code = pwrsSetWDTLimit(uchar2ulong(*l_uc_arg_p,*(l_uc_arg_p+1),*(l_uc_arg_p+2),*(l_uc_arg_
             -p+3)));
                                                      #endif
 579   3                                              g_us_function_module_error_code = g_us_error_code;
 580   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 581   3                                              break;
 582   3      
 583   3                                      case PWRS_I2C_EEPROM_INIT:
 584   3                                              //Reset PWRS EEPROM value to its default
 585   3                                              #if (DEBUGGING_FEATURE == 1)
 586   3                                              g_us_error_code = pwrsInitEeprom(DEBUGGING_FEATURE);
 587   3                                              #else
                                                      g_us_error_code = pwrsInitEeprom();
                                                      #endif
 590   3                                              g_us_function_module_error_code = g_us_error_code;
 591   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 592   3                                              break;
 593   3      
 594   3                                      case PWRS_I2C_SET_PWRS_SDC:
 595   3                                              #if (DEBUGGING_FEATURE == 1)
 596   3                                              g_us_error_code = pwrsSetSDC(*l_uc_arg_p,DEBUGGING_FEATURE);
 597   3                                              #else
                                                      g_us_error_code = pwrsSetSDC(*l_uc_arg_p);
                                                      #endif
 600   3                                              g_us_function_module_error_code = g_us_error_code;
 601   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 602   3                                              break;
 603   3      
 604   3                                      default:
 605   3                                              #if (DEBUGGING_FEATURE == 1)
 606   3                                              //Debugging block
 607   3                                              //----------------
 608   3                                              startTiming();
 609   3                                              //----------------
 610   3                                              //Debugging block
 611   3                                              #endif
 612   3      
 613   3                                              g_us_error_code = EC_PWRS_COMMAND_NOT_FOUND;
 614   3                                              g_us_function_module_error_code = g_us_error_code;
 615   3      
 616   3                                              #if (DEBUGGING_FEATURE == 1)
 617   3                                              //Debugging block
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 12  

 618   3                                              //----------------
 619   3                                              endTiming();
 620   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 621   3                                              //----------------
 622   3                                              //Debugging block
 623   3                                              #endif                                                                          
 624   3                                              break;
 625   3                              }
 626   2                              break;
 627   2      
 628   2                      #endif
 629   2      
 630   2                      #if (RTC_CMD_ENABLE == 1)
 631   2                      //Communication with RTC
 632   2                      case RTC_ADDR:
 633   2                              switch (l_uc_command_tail_byte){
 634   3                                      case RTC_I2C_GET_TIME:
 635   3                                              #if (DEBUGGING_FEATURE == 1)
 636   3                                              g_us_error_code = rtcGetTime(DEBUGGING_FEATURE);
 637   3                                              #else
                                                      g_us_error_code = rtcGetTime();
                                                      #endif
 640   3                                              g_us_function_module_error_code = g_us_error_code;                                      
 641   3                                              l_us_res_length = sendOptions(0x000B,l_uc_response_function_pointer); //Send: error code, data in, ti
             -me taken
 642   3                                              break;
 643   3      
 644   3                                      case RTC_I2C_DATE_INIT:                                 
 645   3                                              #if (DEBUGGING_FEATURE == 1)
 646   3                                              g_us_error_code = rtcDateInit(DEBUGGING_FEATURE);
 647   3                                              #else
                                                      g_us_error_code = rtcDateInit();
                                                      #endif
 650   3                                              g_us_function_module_error_code = g_us_error_code;
 651   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 652   3                                              break;
 653   3      
 654   3                                      case RTC_I2C_UPDATE_DATE:                                       
 655   3                                              #if (DEBUGGING_FEATURE == 1)
 656   3                                              g_us_error_code = rtcUpdateDate(*l_uc_arg_p,*(l_uc_arg_p+1),*(l_uc_arg_p+2),*(l_uc_arg_p+3),*(l_uc_ar
             -g_p+4),*(l_uc_arg_p+5),*(l_uc_arg_p+6), DEBUGGING_FEATURE);
 657   3                                              #else
                                                      g_us_error_code = rtcUpdateDate(*l_uc_arg_p,*(l_uc_arg_p+1),*(l_uc_arg_p+2),*(l_uc_arg_p+3),*(l_uc_ar
             -g_p+4),*(l_uc_arg_p+5),*(l_uc_arg_p+6));
                                                      #endif
 660   3                                              g_us_function_module_error_code = g_us_error_code;
 661   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 662   3                                              break;
 663   3      
 664   3                                      default:
 665   3                                              #if (DEBUGGING_FEATURE == 1)
 666   3                                              //Debugging block
 667   3                                              //----------------
 668   3                                              startTiming();
 669   3                                              //----------------
 670   3                                              //Debugging block
 671   3                                              #endif
 672   3      
 673   3                                              g_us_error_code = EC_RTC_COMMAND_NOT_FOUND;
 674   3                                              g_us_function_module_error_code = g_us_error_code;
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 13  

 675   3      
 676   3                                              #if (DEBUGGING_FEATURE == 1)
 677   3                                              //Debugging block
 678   3                                              //----------------
 679   3                                              endTiming();
 680   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 681   3                                              //----------------
 682   3                                              //Debugging block
 683   3                                              #endif                                                                          
 684   3                                              break;
 685   3                              }
 686   2                              break;
 687   2      
 688   2                      #endif
 689   2      
 690   2                      #if (ANTENNA_CMD_ENABLE == 1)
 691   2                      //Communication with Antenna deployment board
 692   2                      case ANTENNA_1_ADDR:
 693   2                      case ANTENNA_2_ADDR:
 694   2                              switch (l_uc_command_tail_byte){
 695   3                                      case ANTENNA_I2C_RESET:
 696   3                                      case ANTENNA_I2C_ARM:
 697   3                                      case ANTENNA_I2C_DISARM:
 698   3                                      case ANTENNA_I2C_CANCEL_DPLY:
 699   3                                              g_us_error_code = antennaI2C (l_uc_command_header_byte,l_uc_command_tail_byte,DEBUGGING_FEATURE);
 700   3                                              g_us_function_module_error_code = g_us_error_code;
 701   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 702   3                                              break;
 703   3      
 704   3                                      case ANTENNA_I2C_GET_TEMP:
 705   3                                      case ANTENNA_I2C_GET_DPLY_STAT:
 706   3                                      case ANTENNA_I2C_GET_DPLY_1_COUNT:
 707   3                                      case ANTENNA_I2C_GET_DPLY_2_COUNT:
 708   3                                      case ANTENNA_I2C_GET_DPLY_3_COUNT:
 709   3                                      case ANTENNA_I2C_GET_DPLY_4_COUNT:
 710   3                                      case ANTENNA_I2C_GET_DPLY_1_TIME:
 711   3                                      case ANTENNA_I2C_GET_DPLY_2_TIME:
 712   3                                      case ANTENNA_I2C_GET_DPLY_3_TIME:
 713   3                                      case ANTENNA_I2C_GET_DPLY_4_TIME:
 714   3                                              g_us_error_code = antennaI2C (l_uc_command_header_byte,l_uc_command_tail_byte,DEBUGGING_FEATURE);
 715   3                                              g_us_function_module_error_code = g_us_error_code;                                      
 716   3                                              l_us_res_length = sendOptions(0x000F,l_uc_response_function_pointer); //Send: error code, data out, d
             -ata in, time taken
 717   3                                              break;
 718   3      
 719   3                                      case ANTENNA_I2C_DPLY_1_DFLT:
 720   3                                      case ANTENNA_I2C_DPLY_2_DFLT:
 721   3                                      case ANTENNA_I2C_DPLY_3_DFLT:
 722   3                                      case ANTENNA_I2C_DPLY_4_DFLT:
 723   3                                      case ANTENNA_I2C_AUTO_DPLY:
 724   3                                      case ANTENNA_I2C_DPLY_1_OVRD:
 725   3                                      case ANTENNA_I2C_DPLY_2_OVRD:
 726   3                                      case ANTENNA_I2C_DPLY_3_OVRD:
 727   3                                      case ANTENNA_I2C_DPLY_4_OVRD:
 728   3                                              #if (DEBUGGING_FEATURE == 1)
 729   3                                              g_us_error_code = antennaI2CPar (l_uc_command_header_byte,l_uc_command_tail_byte,*l_uc_arg_p,DEBUGGIN
             -G_FEATURE);
 730   3                                              #else
                                                      g_us_error_code = antennaI2CPar (l_uc_command_header_byte,l_uc_command_tail_byte,*l_uc_arg_p);
                                                      #endif
 733   3                                              g_us_function_module_error_code = g_us_error_code;
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 14  

 734   3                                              l_us_res_length = sendOptions(0x000D,l_uc_response_function_pointer); //Send: error code, data out, t
             -ime taken
 735   3                                              break;
 736   3      
 737   3                                      default:
 738   3                                              #if (DEBUGGING_FEATURE == 1)
 739   3                                              //Debugging block
 740   3                                              //----------------
 741   3                                              startTiming();
 742   3                                              //----------------
 743   3                                              //Debugging block
 744   3                                              #endif
 745   3      
 746   3                                              g_us_error_code = EC_ANTENNA_COMMAND_NOT_FOUND;
 747   3                                              g_us_function_module_error_code = g_us_error_code;
 748   3      
 749   3                                              #if (DEBUGGING_FEATURE == 1)
 750   3                                              //Debugging block
 751   3                                              //----------------
 752   3                                              endTiming();
 753   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 754   3                                              //----------------
 755   3                                              //Debugging block
 756   3                                              #endif
 757   3                                              break;
 758   3                              }
 759   2                              break;
 760   2      
 761   2                      #endif
 762   2      
 763   2                      #if (OBDH_CMD_ENABLE == 1)
 764   2                      //Basic Commands to OBC
 765   2                      case OBDH_ADDR:
 766   2                              switch (l_uc_command_tail_byte){
 767   3      
 768   3                                      #if (SATELLITE_SCHEDULE_HANDLER_ENABLE == 1)
 769   3                                      case OBDH_CMD_REMOVE_SCHEDULE:
 770   3                                              #if (DEBUGGING_FEATURE == 1)
 771   3                                              //Debugging block
 772   3                                              //----------------
 773   3                                              startTiming();
 774   3                                              //----------------
 775   3                                              //Debugging block
 776   3                                              #endif
 777   3      
 778   3                                              removeSchedule(*l_uc_arg_p,*(l_uc_arg_p+1));
 779   3                                              g_us_error_code = EC_SUCCESSFUL;
 780   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;
 781   3      
 782   3                                              #if (DEBUGGING_FEATURE == 1)
 783   3                                              //Debugging block
 784   3                                              //----------------
 785   3                                              endTiming();
 786   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 787   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_SCHEDULE, 1);  
             -//Send: schedule (first ten)
 788   3                                              //----------------
 789   3                                              //Debugging block
 790   3                                              #endif
 791   3                                              break;
 792   3                                      #endif
 793   3      
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 15  

 794   3                                      case OBDH_CMD_RESET_I2C_COMMUNICATION:
 795   3                                              #if (DEBUGGING_FEATURE == 1)
 796   3                                              //Debugging block
 797   3                                              //----------------
 798   3                                              startTiming();
 799   3                                              //----------------
 800   3                                              //Debugging block
 801   3                                              #endif
 802   3      
 803   3                                              resetI2CCommunication();
 804   3                                              g_us_error_code = EC_SUCCESSFUL;
 805   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;
 806   3      
 807   3      
 808   3                                              #if (DEBUGGING_FEATURE == 1)
 809   3                                              //Debugging block
 810   3                                              //----------------
 811   3                                              endTiming();
 812   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 813   3                                              //----------------
 814   3                                              //Debugging block
 815   3                                              #endif
 816   3                                              break;
 817   3      
 818   3                                      #if (TASK_ENABLE == 1)
 819   3                                      case OBDH_CMD_RESET_TASK:
 820   3                                              #if (DEBUGGING_FEATURE == 1)
 821   3                                              //Debugging block
 822   3                                              //----------------
 823   3                                              l_us_arg[0] = *l_uc_arg_p;
 824   3                                              startTiming();
 825   3                                              //----------------
 826   3                                              //Debugging block
 827   3                                              #endif
 828   3      
 829   3                                              resetTask(*l_uc_arg_p);
 830   3                                              g_us_error_code = EC_SUCCESSFUL;
 831   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;
 832   3      
 833   3                                              #if (DEBUGGING_FEATURE == 1)
 834   3                                              //Debugging block
 835   3                                              //----------------
 836   3                                              endTiming();
 837   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 838   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_SINGLE_TASK_STR
             -UCTURE, l_us_arg[0]);  //Send: task structure (as the input)
 839   3                                              //----------------
 840   3                                              //Debugging block
 841   3                                              #endif
 842   3                                              break;
 843   3      
 844   3                                      case OBDH_CMD_COMMAND_TASK:
 845   3                                              #if (DEBUGGING_FEATURE == 1)
 846   3                                              //Debugging block
 847   3                                              //----------------
 848   3                                              startTiming();
 849   3                                              //----------------
 850   3                                              //Debugging block
 851   3                                              #endif
 852   3      
 853   3                                              setTaskFlags(*l_uc_arg_p,*(l_uc_arg_p+1),0xF0);
 854   3                                              g_us_error_code = EC_SUCCESSFUL;
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 16  

 855   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;
 856   3      
 857   3                                              #if (DEBUGGING_FEATURE == 1)
 858   3                                              //Debugging block
 859   3                                              //----------------
 860   3                                              endTiming();
 861   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 862   3                                              //----------------
 863   3                                              //Debugging block
 864   3                                              #endif
 865   3                                              break;
 866   3                                      #endif
 867   3      
 868   3                                      #if (STORING_ENABLE == 1)
 869   3                                      case OBDH_CMD_INIT_SD:
 870   3                                              #if (DEBUGGING_FEATURE == 1)
 871   3                                              //Debugging block
 872   3                                              //----------------
 873   3                                              startTiming();
 874   3                                              //----------------
 875   3                                              //Debugging block
 876   3                                              #endif
 877   3      
 878   3                                              g_us_error_code = initSD();
 879   3                                              g_us_function_module_error_code = g_us_error_code;
 880   3      
 881   3                                              #if (DEBUGGING_FEATURE == 1)
 882   3                                              //Debugging block
 883   3                                              //----------------
 884   3                                              endTiming();
 885   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 886   3                                              //----------------
 887   3                                              //Debugging block
 888   3                                              #endif
 889   3                                              break;
 890   3      
 891   3                                      case OBDH_CMD_SD_ERASE_SINGLE_BLOCK:
 892   3                                              #if (DEBUGGING_FEATURE == 1)
 893   3                                              //Debugging block
 894   3                                              //----------------
 895   3                                              startTiming();
 896   3                                              //----------------
 897   3                                              //Debugging block
 898   3                                              #endif
 899   3      
 900   3                                              g_ul = uchar2ulong(*l_uc_arg_p,*(l_uc_arg_p+1),*(l_uc_arg_p+2),*(l_uc_arg_p+3));
 901   3                                              
 902   3                                              //Only allows to erase non-essential block
 903   3                                              if (g_ul > SD_BP_OBDH_ORIGINAL_ESS_END && g_ul <= SD_BP_MAX)
 904   3                                                      g_us_error_code = sdEraseSingleBlock (g_ul);
 905   3                                              else g_us_error_code = EC_SD_CARD_BLOCK_UNACCESSIBLE_TO_BE_ERASED;
 906   3                                              g_us_function_module_error_code = g_us_error_code;
 907   3      
 908   3                                              #if (DEBUGGING_FEATURE == 1)
 909   3                                              //Debugging block
 910   3                                              //----------------
 911   3                                              endTiming();
 912   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 913   3                                              //----------------
 914   3                                              //Debugging block
 915   3                                              #endif
 916   3                                              break;
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 17  

 917   3                                      #endif
 918   3      
 919   3                                      case OBDH_CMD_GET_HK:
 920   3                                              #if (DEBUGGING_FEATURE == 1)
 921   3                                              //Debugging block
 922   3                                              //----------------
 923   3                                              startTiming();
 924   3                                              //----------------
 925   3                                              //Debugging block
 926   3                                              #endif
 927   3      
 928   3                                              getHK();
 929   3                                              g_us_error_code = EC_SUCCESSFUL;
 930   3                                              g_us_function_module_error_code = g_us_error_code;
 931   3      
 932   3                                              #if (DEBUGGING_FEATURE == 1)
 933   3                                              //Debugging block
 934   3                                              //----------------
 935   3                                              endTiming();
 936   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 937   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_LATEST_HK_SAMPL
             -ING_TIME_AND_ORBIT_TAI_FORMAT, 0);
 938   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_LAST_HK_EC, 0);
 939   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_PWRS_HK, 0);
 940   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_ADCS_HK, 0);
 941   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_COMM_HK, 0);
 942   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_OBDH_HK, 0);
 943   3                                              //----------------
 944   3                                              //Debugging block
 945   3                                              #endif
 946   3                                              break;
 947   3      
 948   3                                      #if (STORING_ENABLE == 1)
 949   3                                      case OBDH_CMD_STORE_HK:
 950   3                                              #if (DEBUGGING_FEATURE == 1)
 951   3                                              //Debugging block
 952   3                                              //----------------
 953   3                                              startTiming();
 954   3                                              //----------------
 955   3                                              //Debugging block
 956   3                                              #endif
 957   3      
 958   3                                              storeHK();
 959   3                                              g_us_error_code = EC_SUCCESSFUL;
 960   3                                              g_us_function_module_error_code = g_us_error_code;
 961   3      
 962   3                                              #if (DEBUGGING_FEATURE == 1)
 963   3                                              //Debugging block
 964   3                                              //----------------
 965   3                                              endTiming();
 966   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 967   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_BUF_SD_DATA_IN,
             - 0);
 968   3                                              //----------------
 969   3                                              //Debugging block
 970   3                                              #endif
 971   3                                              break;
 972   3                                      #endif
 973   3      
 974   3                                      #if (SATELLITE_MODE_HANDLER_ENABLE == 1)
 975   3                                      case OBDH_CMD_ENTER_LEOP_IDLE:
 976   3                                              #if (DEBUGGING_FEATURE == 1)
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 18  

 977   3                                              //Debugging block
 978   3                                              //----------------
 979   3                                              startTiming();
 980   3                                              //----------------
 981   3                                              //Debugging block
 982   3                                              #endif
 983   3      
 984   3                                              #if (GROUND_STATION_COMMAND_HANDLER_ENABLE == 1)
 985   3                                              groundTerminateGroundPass();
 986   3                                              #endif
 987   3                                              enterM3();
 988   3                                              g_us_error_code = EC_SUCCESSFUL;
 989   3                                              g_us_function_module_error_code = g_us_error_code;
 990   3      
 991   3                                              #if (DEBUGGING_FEATURE == 1)
 992   3                                              //Debugging block
 993   3                                              //----------------
 994   3                                              endTiming();
 995   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
 996   3                                              //----------------
 997   3                                              //Debugging block
 998   3                                              #endif
 999   3                                              break;
1000   3      
1001   3                                      case OBDH_CMD_ENTER_LEOP_PWRS_SAFE_HOLD:
1002   3                                              #if (DEBUGGING_FEATURE == 1)
1003   3                                              //Debugging block
1004   3                                              //----------------
1005   3                                              startTiming();
1006   3                                              //----------------
1007   3                                              //Debugging block
1008   3                                              #endif
1009   3      
1010   3                                              #if (GROUND_STATION_COMMAND_HANDLER_ENABLE == 1)
1011   3                                              groundTerminateGroundPass();
1012   3                                              #endif
1013   3                                              enterM4();
1014   3                                              g_us_error_code = EC_SUCCESSFUL;
1015   3                                              g_us_function_module_error_code = g_us_error_code;
1016   3      
1017   3                                              #if (DEBUGGING_FEATURE == 1)
1018   3                                              //Debugging block
1019   3                                              //----------------
1020   3                                              endTiming();
1021   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1022   3                                              //----------------
1023   3                                              //Debugging block
1024   3                                              #endif
1025   3                                              break;
1026   3      
1027   3                                      case OBDH_CMD_ENTER_NOP_IDLE:
1028   3                                              #if (DEBUGGING_FEATURE == 1)
1029   3                                              //Debugging block
1030   3                                              //----------------
1031   3                                              startTiming();
1032   3                                              //----------------
1033   3                                              //Debugging block
1034   3                                              #endif
1035   3      
1036   3                                              #if (GROUND_STATION_COMMAND_HANDLER_ENABLE == 1)
1037   3                                              groundTerminateGroundPass();
1038   3                                              #endif
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 19  

1039   3                                              enterM5();
1040   3                                              g_us_error_code = EC_SUCCESSFUL;
1041   3                                              g_us_function_module_error_code = g_us_error_code;
1042   3      
1043   3                                              #if (DEBUGGING_FEATURE == 1)
1044   3                                              //Debugging block
1045   3                                              //----------------
1046   3                                              endTiming();
1047   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1048   3                                              //----------------
1049   3                                              //Debugging block
1050   3                                              #endif
1051   3                                              break;
1052   3                                      #endif
1053   3      
1054   3                                      #if (GROUND_STATION_COMMAND_HANDLER_ENABLE == 1)
1055   3                                      case OBDH_CMD_ENTER_GROUNDPASS:
1056   3                                              #if (DEBUGGING_FEATURE == 1)
1057   3                                              //Debugging block
1058   3                                              //----------------
1059   3                                              startTiming();
1060   3                                              //----------------
1061   3                                              //Debugging block
1062   3                                              #endif
1063   3      
1064   3                                              enterGroundPass();
1065   3                                              g_us_error_code = EC_SUCCESSFUL;
1066   3                                              g_us_function_module_error_code = g_us_error_code;
1067   3      
1068   3                                              #if (DEBUGGING_FEATURE == 1)
1069   3                                              //Debugging block
1070   3                                              //----------------
1071   3                                              endTiming();
1072   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1073   3                                              //----------------
1074   3                                              //Debugging block
1075   3                                              #endif
1076   3                                              break;
1077   3                                      #endif
1078   3      
1079   3                                      #if (SATELLITE_MODE_HANDLER_ENABLE == 1)
1080   3                                      #if (GROUND_STATION_COMMAND_HANDLER_ENABLE == 1)
1081   3                                      case OBDH_CMD_ENTER_MISSION_MODE:
1082   3                                              #if (DEBUGGING_FEATURE == 1)
1083   3                                              //Debugging block
1084   3                                              //----------------
1085   3                                              startTiming();
1086   3                                              //----------------
1087   3                                              //Debugging block
1088   3                                              #endif
1089   3      
1090   3                                              #if (GROUND_STATION_COMMAND_HANDLER_ENABLE == 1)
1091   3                                              groundTerminateGroundPass();
1092   3                                              #endif
1093   3                                              l_us_arg[0] = (unsigned short)(*l_uc_arg_p << 8) + *(l_uc_arg_p+1);
1094   3                                              groundEnterMissionMode(l_us_arg[0]);
1095   3                                              g_us_error_code = EC_SUCCESSFUL;
1096   3                                              g_us_function_module_error_code = g_us_error_code;
1097   3      
1098   3                                              #if (DEBUGGING_FEATURE == 1)
1099   3                                              //Debugging block
1100   3                                              //----------------
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 20  

1101   3                                              endTiming();
1102   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1103   3                                              //----------------
1104   3                                              //Debugging block
1105   3                                              #endif
1106   3                                              break;
1107   3                                      #endif
1108   3      
1109   3                                      case OBDH_CMD_ENTER_NOP_PWRS_SAFE_HOLD:
1110   3                                              #if (DEBUGGING_FEATURE == 1)
1111   3                                              //Debugging block
1112   3                                              //----------------
1113   3                                              startTiming();
1114   3                                              //----------------
1115   3                                              //Debugging block
1116   3                                              #endif
1117   3      
1118   3                                              #if (GROUND_STATION_COMMAND_HANDLER_ENABLE == 1)
1119   3                                              groundTerminateGroundPass();
1120   3                                              #endif
1121   3                                              enterM8();
1122   3                                              g_us_error_code = EC_SUCCESSFUL;
1123   3                                              g_us_function_module_error_code = g_us_error_code;
1124   3      
1125   3                                              #if (DEBUGGING_FEATURE == 1)
1126   3                                              //Debugging block
1127   3                                              //----------------
1128   3                                              endTiming();
1129   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1130   3                                              //----------------
1131   3                                              //Debugging block
1132   3                                              #endif
1133   3                                              break;
1134   3                                      #endif
1135   3      
1136   3                                      #if (BODY_RATE_HANDLER_ENABLE == 1)
1137   3                                      #if (ADCS_CMD_ENABLE == 1)
1138   3                                      #if (PWRS_CMD_ENABLE == 1)
1139   3                                      case OBDH_CMD_SET_BRH:
1140   3                                              #if (DEBUGGING_FEATURE == 1)
1141   3                                              //Debugging block
1142   3                                              //----------------
1143   3                                              startTiming();
1144   3                                              //----------------
1145   3                                              //Debugging block
1146   3                                              #endif
1147   3      
1148   3                                              if (*l_uc_arg_p == 0xff)        str_obdh_hk.us_brh_flag |= BRH_FLAG_ENABLE;
1149   3                                              else if (*l_uc_arg_p == 0)      str_obdh_hk.us_brh_flag &= ~BRH_FLAG_ENABLE;
1150   3                                              l_us_arg[0] = str_obdh_hk.us_brh_flag;
1151   3                                              g_us_error_code = EC_SUCCESSFUL;
1152   3                                              g_us_function_module_error_code = g_us_error_code;
1153   3      
1154   3                                              #if (DEBUGGING_FEATURE == 1)
1155   3                                              //Debugging block
1156   3                                              //----------------
1157   3                                              endTiming();
1158   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1159   3                                              //----------------
1160   3                                              //Debugging block
1161   3                                              #endif
1162   3                                              break;
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 21  

1163   3                                      #endif
1164   3                                      #endif
1165   3                                      #endif
1166   3      
1167   3                                      #if (IDLE_MODE_HANDLER_ENABLE == 1)
1168   3                                      #if (PWRS_CMD_ENABLE == 1)
1169   3                                      case OBDH_CMD_SET_IMH:
1170   3                                              #if (DEBUGGING_FEATURE == 1)
1171   3                                              //Debugging block
1172   3                                              //----------------
1173   3                                              startTiming();
1174   3                                              //----------------
1175   3                                              //Debugging block
1176   3                                              #endif
1177   3      
1178   3                                              if (*l_uc_arg_p == 0xff)        str_obdh_hk.us_imh_flag |= IMH_FLAG_ENABLE;
1179   3                                              else if (*l_uc_arg_p == 0)      str_obdh_hk.us_imh_flag &= ~IMH_FLAG_ENABLE;
1180   3                                              l_us_arg[0] = str_obdh_hk.us_imh_flag;
1181   3                                              g_us_error_code = EC_SUCCESSFUL;
1182   3                                              g_us_function_module_error_code = g_us_error_code;
1183   3      
1184   3                                              #if (DEBUGGING_FEATURE == 1)
1185   3                                              //Debugging block
1186   3                                              //----------------
1187   3                                              endTiming();
1188   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1189   3                                              //----------------
1190   3                                              //Debugging block
1191   3                                              #endif
1192   3                                              break;
1193   3                                      #endif
1194   3                                      #endif
1195   3      
1196   3                                      #if (SATELLITE_SCHEDULE_HANDLER_ENABLE == 1)
1197   3                                      case OBDH_CMD_TURN_ON_ADCS:
1198   3                                              #if (DEBUGGING_FEATURE == 1)
1199   3                                              //Debugging block
1200   3                                              //----------------
1201   3                                              startTiming();
1202   3                                              //----------------
1203   3                                              //Debugging block
1204   3                                              #endif
1205   3      
1206   3                                              g_us_error_code = scheduleTurnOnADCS(str_obdh_data.ul_obc_time_s+2);
1207   3                                              g_us_function_module_error_code = g_us_error_code;
1208   3      
1209   3                                              #if (DEBUGGING_FEATURE == 1)
1210   3                                              //Debugging block
1211   3                                              //----------------
1212   3                                              endTiming();
1213   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1214   3                                              //----------------
1215   3                                              //Debugging block
1216   3                                              #endif
1217   3                                              break;
1218   3                                      #endif
1219   3      
1220   3                                      #if (GROUND_STATION_COMMAND_HANDLER_ENABLE == 1)
1221   3                                      case OBDH_CMD_TERMINATE_GROUNDPASS:
1222   3                                              #if (DEBUGGING_FEATURE == 1)
1223   3                                              //Debugging block
1224   3                                              //----------------
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 22  

1225   3                                              startTiming();
1226   3                                              //----------------
1227   3                                              //Debugging block
1228   3                                              #endif
1229   3      
1230   3                                              groundTerminateGroundPass();
1231   3                                              g_us_error_code = EC_SUCCESSFUL;
1232   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;
1233   3      
1234   3                                              #if (DEBUGGING_FEATURE == 1)
1235   3                                              //Debugging block
1236   3                                              //----------------
1237   3                                              endTiming();
1238   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1239   3                                              //----------------
1240   3                                              //Debugging block
1241   3                                              #endif
1242   3                                              break;
1243   3                                      #endif
1244   3      
1245   3                                      #if (EXTRA_ENABLE == 1)
1246   3                                      case OBDH_CMD_SW_RESET:
1247   3                                      case OBDH_CMD_HW_RESET:
1248   3                                      case OBDH_CMD_RESET_SAT:
1249   3                                              //Ian (20120905 11:11AM): This condition is added to further distinguish the cause of reset of the sa
             -tellite
1250   3                                              //For many will call reset with OBDH_CMD_RESET_SAT argument, not just OBDH command
1251   3                                              if (OBDH_CMD_RESET_SAT == l_uc_command_tail_byte) str_obdh_data.uc_sat_rstsrc = RESET_SOURCE_OBDH_COM
             -MAND;
1252   3                                              callReset(l_uc_command_tail_byte);
1253   3                                              break;
1254   3                                      #endif
1255   3      
1256   3                                      #if (OBDH_HDN_CMD_ENABLE == 1)
1257   3                                      #if (DEBUGGING_FEATURE == 1)
1258   3                                      case OBDH_HDN_CMD_WAIT_MS:
1259   3                                              //Debugging block
1260   3                                              //----------------
1261   3                                              startTiming();
1262   3                                              //----------------
1263   3                                              //Debugging block
1264   3      
1265   3                                              waitMs(*l_uc_arg_p);
1266   3                                              g_us_error_code = EC_SUCCESSFUL;
1267   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;
1268   3      
1269   3                                              //Debugging block
1270   3                                              //----------------
1271   3                                              endTiming();
1272   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1273   3                                              //----------------
1274   3                                              //Debugging block
1275   3                                              break;
1276   3                                      #endif
1277   3      
1278   3                                      #if (DEBUGGING_FEATURE == 1)
1279   3                                      case OBDH_HDN_CMD_WAIT_S:
1280   3                                              //Debugging block
1281   3                                              //----------------
1282   3                                              startTiming();
1283   3                                              //----------------
1284   3                                              //Debugging block
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 23  

1285   3      
1286   3                                              waitS(*l_uc_arg_p);
1287   3                                              g_us_error_code = EC_SUCCESSFUL;
1288   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;
1289   3      
1290   3                                              //Debugging block
1291   3                                              //----------------
1292   3                                              endTiming();
1293   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1294   3                                              //----------------
1295   3                                              //Debugging block
1296   3                                              break;
1297   3                                      #endif
1298   3      
1299   3                                      case OBDH_HDN_CMD_PING:
1300   3                                              //Debugging block
1301   3                                              //----------------
1302   3                                              startTiming();
1303   3                                              //----------------
1304   3                                              //Debugging block
1305   3      
1306   3                                              g_us_error_code = EC_SUCCESSFUL;
1307   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;
1308   3      
1309   3                                              //Debugging block
1310   3                                              //----------------
1311   3                                              endTiming();
1312   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1313   3                                              //----------------
1314   3                                              //Debugging block
1315   3                                              break;
1316   3      
1317   3                                      #if (STORING_ENABLE == 1)
1318   3                                      #if (DEBUGGING_FEATURE == 1)
1319   3                                      case OBDH_HDN_CMD_SEARCH_BP_BY_ORBIT_INFO:
1320   3                                              //Debugging block
1321   3                                              //----------------
1322   3                                              g_us_obs_first_orbit_request = (unsigned short)(*(l_uc_arg_p+1) << 8) + *(l_uc_arg_p+2);
1323   3                                              g_us_obs_last_orbit_request = (unsigned short)(*(l_uc_arg_p+3) << 8) + *(l_uc_arg_p+4);
1324   3                                              startTiming();
1325   3                                              //----------------
1326   3                                              //Debugging block
1327   3      
1328   3                                              g_us_error_code = searchBPByOrbitInfo (*l_uc_arg_p);
1329   3                                              g_us_function_module_error_code = g_us_error_code;
1330   3      
1331   3                                              //Debugging block
1332   3                                              //----------------
1333   3                                              endTiming();
1334   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1335   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_OBS_VAR, 0);
1336   3                                              //----------------
1337   3                                              //Debugging block
1338   3                                              break;
1339   3                                      #endif
1340   3                                      #endif
1341   3      
1342   3                                      case OBDH_HDN_CMD_CHANGE_DATA:
1343   3                                              #if (DEBUGGING_FEATURE == 1)
1344   3                                              //Debugging block
1345   3                                              //----------------
1346   3                                              startTiming();
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 24  

1347   3                                              //----------------
1348   3                                              //Debugging block
1349   3                                              #endif
1350   3      
1351   3                                              l_us_arg[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p+1);
1352   3                                              changeData (l_us_arg[0], *(l_uc_arg_p+2), *(l_uc_arg_p+3), *(l_uc_arg_p+4), *(l_uc_arg_p+5));
1353   3                                              g_us_error_code = EC_SUCCESSFUL;
1354   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;
1355   3      
1356   3                                              #if (DEBUGGING_FEATURE == 1)
1357   3                                              //Debugging block
1358   3                                              //----------------
1359   3                                              endTiming();
1360   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1361   3                                              //----------------
1362   3                                              //Debugging block
1363   3                                              #endif
1364   3                                              break;
1365   3      
1366   3                                      #if (TASK_ENABLE == 1)
1367   3                                      case OBDH_HDN_CMD_ENTER_SCRIPTLINE:
1368   3                                              #if (DEBUGGING_FEATURE == 1)
1369   3                                              //Debugging block
1370   3                                              //----------------
1371   3                                              l_us_arg[0] = *l_uc_arg_p;
1372   3                                              startTiming();
1373   3                                              //----------------
1374   3                                              //Debugging block
1375   3                                              #endif
1376   3      
1377   3                                              enterScriptline (*l_uc_arg_p, *(l_uc_arg_p+1), *(l_uc_arg_p+2), *(l_uc_arg_p+3), *(l_uc_arg_p+4), *(l
             -_uc_arg_p+5));
1378   3                                              g_us_error_code = EC_SUCCESSFUL;
1379   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;
1380   3      
1381   3                                              #if (DEBUGGING_FEATURE == 1)
1382   3                                              //Debugging block
1383   3                                              //----------------
1384   3                                              endTiming();
1385   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1386   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_SINGLE_SCRIPTSP
             -ACE, l_us_arg[0]);  //Send: task script (as the input)
1387   3                                              //----------------
1388   3                                              //Debugging block
1389   3                                              #endif
1390   3                                              break;
1391   3                                      #endif
1392   3      
1393   3                                      #if (STORING_ENABLE == 1)
1394   3                                      #if (DEBUGGING_FEATURE == 1)
1395   3                                      case OBDH_HDN_CMD_SD_READ_SINGLE_BLOCK:
1396   3                                              //Debugging block
1397   3                                              //----------------
1398   3                                              startTiming();
1399   3                                              //----------------
1400   3                                              //Debugging block
1401   3      
1402   3                                              l_us_arg[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p+1); //dec_yc requires *l_uc_arg_p,*
             -(l_uc_arg_p+1)
1403   3                                              l_us_arg[1] = (unsigned short)((*l_uc_arg_p+2) << 8) + *(l_uc_arg_p+3); //dec_yc requires *(l_uc_arg_
             -p+2),*(l_uc_arg_p+3)
1404   3                                              g_us_error_code = sdReadSingleBlock (uchar2ulong(*l_uc_arg_p,*(l_uc_arg_p+1),*(l_uc_arg_p+2),*(l_uc_a
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 25  

             -rg_p+3)));
1405   3                                              g_us_function_module_error_code = g_us_error_code;
1406   3      
1407   3                                              //Debugging block
1408   3                                              //----------------
1409   3                                              endTiming();
1410   3                                              l_us_res_length = sendOptions(0x0409,l_uc_response_function_pointer); //Send: error code, time taken,
             - SD data in
1411   3                                              //----------------
1412   3                                              //Debugging block
1413   3                                              break;
1414   3                                      #endif
1415   3      
1416   3                                      #if (DEBUGGING_FEATURE == 1)
1417   3                                      case OBDH_HDN_CMD_SD_WRITE_SINGLE_BLOCK:
1418   3                                              //Debugging block
1419   3                                              //----------------
1420   3                                              startTiming();
1421   3                                              //----------------
1422   3                                              //Debugging block
1423   3      
1424   3                                              l_us_arg[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p+1); //dec_yc requires *l_uc_arg_p,*
             -(l_uc_arg_p+1)
1425   3                                              l_us_arg[1] = (unsigned short)((*l_uc_arg_p+2) << 8) + *(l_uc_arg_p+3); //dec_yc requires *(l_uc_arg_
             -p+2),*(l_uc_arg_p+3)
1426   3                                              g_us_error_code = sdWriteSingleBlock (uchar2ulong(*l_uc_arg_p,*(l_uc_arg_p+1),*(l_uc_arg_p+2),*(l_uc_
             -arg_p+3)), g_uc_sd_data_buffer, SD_CARD_BUFFER_SIZE);
1427   3                                              g_us_function_module_error_code = g_us_error_code;
1428   3      
1429   3                                              //Debugging block
1430   3                                              //----------------
1431   3                                              endTiming();
1432   3                                              l_us_res_length = sendOptions(0x0809,l_uc_response_function_pointer); //Send: error code, time taken,
             - SD data out
1433   3                                              //----------------
1434   3                                              //Debugging block
1435   3                                              break;
1436   3                                      #endif
1437   3      
1438   3                                      #if (DEBUGGING_FEATURE == 1)
1439   3                                      case OBDH_HDN_CMD_SAVE_DATA_PROTECTED:
1440   3                                              //Debugging block
1441   3                                              //----------------
1442   3                                              startTiming();
1443   3                                              //----------------
1444   3                                              //Debugging block
1445   3      
1446   3                                              g_us_error_code = saveDataProtected (*l_uc_arg_p,*(l_uc_arg_p+1),g_uc_sd_data_buffer);
1447   3                                              l_us_arg[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p+1); //dec_yc requires *l_uc_arg_p,*
             -(l_uc_arg_p+1)
1448   3                                              g_us_function_module_error_code = g_us_error_code; //dec_yc requires *l_uc_arg_p,*(l_uc_arg_p+1)
1449   3      
1450   3                                              //Debugging block
1451   3                                              //----------------
1452   3                                              endTiming();
1453   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken.
1454   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_SD_HEADER, 0); 
             - //Send: SD card headers
1455   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_STORING_VAR, 0)
             -;  //Send: storing variables
1456   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_HOLD_ACTIVATION
             -, 0);  //Send: hold activation variables
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 26  

1457   3                                              //----------------
1458   3                                              //Debugging block
1459   3                                              break;
1460   3                                      #endif
1461   3      
1462   3                                      #if (DEBUGGING_FEATURE == 1)
1463   3                                      case OBDH_HDN_CMD_LOAD_DATA_PROTECTED:
1464   3                                              //Debugging block
1465   3                                              //----------------
1466   3                                              startTiming();
1467   3                                              //----------------
1468   3                                              //Debugging block
1469   3      
1470   3                                              g_us_error_code = loadDataProtected (*l_uc_arg_p,*(l_uc_arg_p+1),uchar2ulong(*(l_uc_arg_p+2),*(l_uc_a
             -rg_p+3),*(l_uc_arg_p+4),*(l_uc_arg_p+5)),uchar2ulong(*(l_uc_arg_p+6),*(l_uc_arg_p+7),*(l_uc_arg_p+8),*(l_uc_arg_p+9)));
1471   3                                              l_us_arg[0] = (unsigned short)((*l_uc_arg_p) << 8) + *(l_uc_arg_p+1); //dec_yc requires *l_uc_arg_p,*
             -(l_uc_arg_p+1)
1472   3                                              g_us_function_module_error_code = g_us_error_code; //dec_yc requires *l_uc_arg_p,*(l_uc_arg_p+1)
1473   3      
1474   3                                              //Debugging block
1475   3                                              //----------------
1476   3                                              endTiming();
1477   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken.
1478   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_SD_HEADER, 0); 
             - //Send: SD card headers
1479   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, DATA_CAT_STORING_VAR, 0)
             -;  //Send: storing variables
1480   3                                              //----------------
1481   3                                              //Debugging block
1482   3                                              break;
1483   3                                      #endif
1484   3                                      #endif
1485   3      
1486   3                                      case OBDH_HDN_CMD_READ_DATA:
1487   3                                              #if (DEBUGGING_FEATURE == 1)
1488   3                                              //Debugging block
1489   3                                              //----------------
1490   3                                              startTiming();
1491   3                                              //----------------
1492   3                                              //Debugging block
1493   3                                              #endif
1494   3      
1495   3                                              l_us_arg[0] = (unsigned short)(*l_uc_arg_p << 8) + *(l_uc_arg_p+1);
1496   3                                              l_us_arg[1] = (unsigned short)(*(l_uc_arg_p+2) << 8) + *(l_uc_arg_p+3);
1497   3                                              g_us = fillData (l_uc_response_function_pointer, l_us_res_length, l_us_arg[0], l_us_arg[1]);
1498   3                                              g_us_error_code = EC_SUCCESSFUL;
1499   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;//dec_yc requires l_us_arg[0],l_us_arg[1]
1500   3      
1501   3                                              #if (DEBUGGING_FEATURE == 1)
1502   3                                              //Debugging block
1503   3                                              //----------------
1504   3                                              endTiming();
1505   3                                              l_us_res_length = sendOptions(0x4009,l_uc_response_function_pointer); //Send: error code, time taken,
             - global multi-purpose variable: g_us
1506   3                                              l_us_res_length = fillData (l_uc_response_function_pointer, l_us_res_length, l_us_arg[0], l_us_arg[1]
             -);
1507   3                                              //----------------
1508   3                                              //Debugging block
1509   3                                              #endif
1510   3                                              break;
1511   3      
1512   3                                      //To write satellite initial state into its proper SD card block (SD_BP_OBDH_ORIGINAL_ESS_START)
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 27  

1513   3                                      //Only available during debugging, before launch
1514   3                                      #if (STORING_ENABLE == 1)
1515   3                                      #if (DEBUGGING_FEATURE == 1)
1516   3                                      case OBDH_HDN_CMD_WRITE_INIT_STATE:
1517   3                                              startTiming();
1518   3                                              l_us_arg[0] = *l_uc_arg_p; //To indicate offset block from SD_BP_OBDH_ORIGINAL_ESS_START
1519   3                                              for (l_us_counter = 0; l_us_counter < l_us_arg_length-1; l_us_counter++)
1520   3                                                      g_uc_sd_data_buffer[l_us_counter] = *(l_uc_arg_p+l_us_counter+1);       
1521   3                                              for (l_us_counter = l_us_arg_length-1; l_us_counter < SD_CARD_BUFFER_SIZE; l_us_counter++)
1522   3                                                      g_uc_sd_data_buffer[l_us_counter] = 0;  
1523   3                                              g_us_error_code = sdWriteSingleBlock (SD_BP_OBDH_ORIGINAL_ESS_START+l_us_arg[0],g_uc_sd_data_buffer,S
             -D_CARD_BUFFER_SIZE);
1524   3                                              g_us_function_module_error_code = g_us_error_code;
1525   3      
1526   3                                              #if (SATELLITE_SCHEDULE_HANDLER_ENABLE == 1)
1527   3                                              //Only write this once, when offset = 0
1528   3                                              if (!l_us_arg[0]){                                      
1529   4                                                      //Remove all items in the schedule
1530   4                                                      removeSchedule(1,SCHEDULER_BLOCK_SIZE);
1531   4              
1532   4                                                      //Save the empty schedule in the SD_BP_OBDH_SCHEDULE_START
1533   4                                                      g_us_error_code = saveDataProtected (OBDH_SUBSYSTEM,SD_SCHEDULE,g_uc_sd_data_buffer);
1534   4                                                      g_us_function_module_error_code = g_us_error_code;
1535   4                      
1536   4                                                      //Switch the scheduler's block pointer to the original
1537   4                                                      g_ul_schedule_bp = SD_BP_OBDH_ORIGINAL_SCHEDULE_START;
1538   4                                                      
1539   4                                                      //Save the empty schedule in the SD_BP_OBDH_ORIGINAL_SCHEDULE_START
1540   4                                                      g_us_error_code = saveDataProtected (OBDH_SUBSYSTEM,SD_SCHEDULE,g_uc_sd_data_buffer);
1541   4                                                      g_us_function_module_error_code = g_us_error_code;
1542   4                      
1543   4                                                      //Switch the scheduler's block pointer back to the actual
1544   4                                                      g_ul_schedule_bp = SD_BP_OBDH_SCHEDULE_START;
1545   4                                              }
1546   3                                              #endif
1547   3      
1548   3                                              #if (TASK_ENABLE == 1)
1549   3                                              //Only write this once, when offset = 0
1550   3                                              if (!l_us_arg[0]){                                      
1551   4                                                      //Initialize the script to the genesis state
1552   4                                                      initTaskScript();
1553   4              
1554   4                                                      //Save the original script in the SD_BP_OBDH_SCRIPT_START
1555   4                                                      g_us_error_code = saveDataProtected (OBDH_SUBSYSTEM,SD_SCRIPT,g_uc_sd_data_buffer);
1556   4                                                      g_us_function_module_error_code = g_us_error_code;
1557   4                      
1558   4                                                      //Switch the script's block pointer to the original
1559   4                                                      g_ul_script_bp = SD_BP_OBDH_ORIGINAL_SCRIPT_START;
1560   4                                                      
1561   4                                                      //Save the original script in the SD_BP_OBDH_ORIGINAL_SCRIPT_START
1562   4                                                      g_us_error_code = saveDataProtected (OBDH_SUBSYSTEM,SD_SCRIPT,g_uc_sd_data_buffer);
1563   4                                                      g_us_function_module_error_code = g_us_error_code;
1564   4                      
1565   4                                                      //Switch the script's block pointer back to the actual
1566   4                                                      g_ul_script_bp = SD_BP_OBDH_SCRIPT_START;
1567   4                                              }
1568   3                                              #endif
1569   3                                              
1570   3                                              endTiming();
1571   3                                              l_us_res_length = sendOptions(0x0809,l_uc_response_function_pointer); //Send: error code, time taken,
             - SD data out
1572   3                                              break;
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 28  

1573   3                                      #endif
1574   3                                      #endif
1575   3      
1576   3                                      #if (STORING_ENABLE == 1)
1577   3                                      //To copy over satellite initial state to essential SD card block
1578   3                                      case OBDH_HDN_CMD_COPY_INIT_STATE_TO_ESS:                                       
1579   3                                              #if (DEBUGGING_FEATURE == 1)
1580   3                                              //Debugging block
1581   3                                              //----------------
1582   3                                              startTiming();
1583   3                                              //----------------
1584   3                                              //Debugging block
1585   3                                              #endif
1586   3      
1587   3                                              //Copy over *l_uc_arg_p no of SD card blocks
1588   3                                              //Ian (2012-05-15): the value of l_us_arg[0] is expected to be in between 0-255
1589   3                                              l_us_arg[0] = *l_uc_arg_p;
1590   3                                              for (l_us_counter = 0; l_us_counter < l_us_arg[0]; l_us_counter++){
1591   4                                                      g_us_error_code = sdReadSingleBlock (SD_BP_OBDH_ORIGINAL_ESS_START+l_us_counter);
1592   4                                                      if (!g_us_error_code)
1593   4                                                              g_us_error_code = sdWriteSingleBlock (SD_BP_OBDH_ESS_START+l_us_counter, g_uc_sd_data_buffer, SD_CA
             -RD_BUFFER_SIZE);
1594   4                                              }
1595   3                                              g_us_function_module_error_code = g_us_error_code;
1596   3      
1597   3                                              #if (DEBUGGING_FEATURE == 1)
1598   3                                              //Debugging block
1599   3                                              //----------------
1600   3                                              endTiming();
1601   3                                              l_us_res_length = sendOptions(0x0809,l_uc_response_function_pointer); //Send: error code, time taken,
             - SD data out
1602   3                                              //----------------
1603   3                                              //Debugging block
1604   3                                              #endif
1605   3                                              break;
1606   3                                      #endif
1607   3      
1608   3                                      //To create CRC16 of a message
1609   3                                      //Only available during debugging, before launch
1610   3                                      #if (CRC_ENABLE == 1)
1611   3                                      #if (DEBUGGING_FEATURE == 1)
1612   3                                      case OBDH_HDN_CMD_CREATE_CRC16:
1613   3                                              startTiming();
1614   3                                              g_us_checksum_register = createChecksum (l_uc_arg_p, l_us_arg_length, CHECKSUM_CRC16_TABLE);
1615   3                                              g_us_error_code = EC_SUCCESSFUL;
1616   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;
1617   3                                              endTiming();
1618   3                                              l_us_res_length = sendOptions(0x0209,l_uc_response_function_pointer); //Send: error code, time taken,
             - global multi-purpose variable: g_us.                                         
1619   3                                              break;
1620   3                                      #endif
1621   3                                      #endif
1622   3      
1623   3                                      #if (STORING_ENABLE == 1)
1624   3                                      //To save latest satellite state
1625   3                                      case OBDH_HDN_CMD_SAVE_STATE:
1626   3                                              #if (DEBUGGING_FEATURE == 1)
1627   3                                              //Debugging block
1628   3                                              //----------------
1629   3                                              startTiming();
1630   3                                              //----------------
1631   3                                              //Debugging block
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 29  

1632   3                                              #endif
1633   3      
1634   3                                              saveState();
1635   3                                              g_us_error_code = EC_SUCCESSFUL;
1636   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;
1637   3      
1638   3                                              #if (DEBUGGING_FEATURE == 1)
1639   3                                              //Debugging block
1640   3                                              //----------------
1641   3                                              endTiming();
1642   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1643   3                                              //----------------
1644   3                                              //Debugging block
1645   3                                              #endif
1646   3                                              break;
1647   3      
1648   3                                      //To load latest satellite state
1649   3                                      case OBDH_HDN_CMD_LOAD_STATE:
1650   3                                              #if (DEBUGGING_FEATURE == 1)
1651   3                                              //Debugging block
1652   3                                              //----------------
1653   3                                              startTiming();
1654   3                                              //----------------
1655   3                                              //Debugging block
1656   3                                              #endif
1657   3      
1658   3                                              loadState();
1659   3                                              g_us_error_code = EC_SUCCESSFUL;
1660   3                                              g_us_function_module_error_code = EC_SUCCESSFUL;
1661   3      
1662   3                                              #if (DEBUGGING_FEATURE == 1)
1663   3                                              //Debugging block
1664   3                                              //----------------
1665   3                                              endTiming();
1666   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1667   3                                              //----------------
1668   3                                              //Debugging block
1669   3                                              #endif
1670   3                                              break;
1671   3      
1672   3                                      //To start the very beginning state of the satellite
1673   3                                      case OBDH_HDN_CMD_GENESIS:
1674   3                                              #if (DEBUGGING_FEATURE == 1)
1675   3                                              //Debugging block
1676   3                                              //----------------
1677   3                                              startTiming();
1678   3                                              //----------------
1679   3                                              //Debugging block
1680   3                                              #endif
1681   3      
1682   3                                              //Temporarily change the essential block pointer to the original
1683   3                                              g_ul_essential_bp = SD_BP_OBDH_ORIGINAL_ESS_START;
1684   3      
1685   3                                              //Load the latest SD essential block
1686   3                                              g_us_error_code = loadDataProtected(ALL_SUBSYSTEMS, SD_ESSENTIAL, g_ul_essential_bp, g_ul_essential_b
             -p);
1687   3      
1688   3                                              //Change back the essential block pointer to the normal
1689   3                                              g_ul_essential_bp = SD_BP_OBDH_ESS_START;
1690   3                                              
1691   3                                              //Proceeds if there is no error code
1692   3                                              if (!g_us_error_code){
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 30  

1693   4                                                      //Set initial value for l_us_data_counter
1694   4                                                      g_us_data_counter = SD_CARD_HEADER_SIZE;
1695   4                                      
1696   4                                                      //Update OBDH essential data
1697   4                                                      updateOBDHEssential(g_uc_sd_data_buffer);
1698   4      
1699   4                                                      #if (SATELLITE_SCHEDULE_HANDLER_ENABLE == 1)
1700   4                                                      //Remove all items in the schedule
1701   4                                                      removeSchedule(1,SCHEDULER_BLOCK_SIZE);
1702   4                                                      #endif
1703   4              
1704   4                                                      #if (TASK_ENABLE == 1)
1705   4                                                      //Re-initialize scriptline to the original
1706   4                                                      initTaskScript();
1707   4                                                      #endif
1708   4      
1709   4                                                      //Save the genesis state
1710   4                                                      saveState();
1711   4                                              }
1712   3      
1713   3                                              //Record function module error code
1714   3                                              g_us_function_module_error_code = g_us_error_code;
1715   3      
1716   3                                              #if (DEBUGGING_FEATURE == 1)
1717   3                                              //Debugging block
1718   3                                              //----------------
1719   3                                              endTiming();
1720   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1721   3                                              //----------------
1722   3                                              //Debugging block
1723   3                                              #endif
1724   3                                              break;
1725   3                                      #endif
1726   3      
1727   3                                      #endif
1728   3      
1729   3                                      default:
1730   3                                              #if (DEBUGGING_FEATURE == 1)
1731   3                                              //Debugging block
1732   3                                              //----------------
1733   3                                              startTiming();
1734   3                                              //----------------
1735   3                                              //Debugging block
1736   3                                              #endif
1737   3      
1738   3                                              g_us_error_code = EC_OBDH_COMMAND_NOT_FOUND;
1739   3                                              g_us_function_module_error_code = g_us_error_code;
1740   3      
1741   3                                              #if (DEBUGGING_FEATURE == 1)
1742   3                                              //Debugging block
1743   3                                              //----------------
1744   3                                              endTiming();
1745   3                                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1746   3                                              //----------------
1747   3                                              //Debugging block
1748   3                                              #endif
1749   3                                              break;
1750   3                              }
1751   2                              break;
1752   2      
1753   2                      #endif
1754   2      
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 31  

1755   2                      //Default case (return error code EC_COMMAND_NOT_FOUND)
1756   2                      default:
1757   2                              #if (DEBUGGING_FEATURE == 1)
1758   2                              //Debugging block
1759   2                              //----------------
1760   2                              startTiming();
1761   2                              //----------------
1762   2                              //Debugging block
1763   2                              #endif
1764   2      
1765   2                              g_us_error_code = EC_COMMAND_NOT_FOUND;
1766   2                              g_us_function_module_error_code = g_us_error_code;
1767   2      
1768   2                              #if (DEBUGGING_FEATURE == 1)
1769   2                              //Debugging block
1770   2                              //----------------
1771   2                              endTiming();
1772   2                              l_us_res_length = sendOptions(0x0009,l_uc_response_function_pointer); //Send: error code, time taken
1773   2                              //----------------
1774   2                              //Debugging block
1775   2                              #endif
1776   2                              break;
1777   2      
1778   2              }
1779   1              #if (EVENT_HANDLER_ENABLE == 1)
1780   1              #if (STORING_ENABLE == 1)
1781   1              //dec22_yc eventHandler Call  tested
1782   1              //yc deleted 20120224
1783   1              //if(g_us_function_module_error_code){
1784   1                      eventHandler(EV_E_FUNCTION_MODULE+g_us_function_module_error_code,l_uc_command_header_byte,l_uc_command_
             -tail_byte,
1785   1                                      l_us_arg[0]>>8,l_us_arg[0],l_us_arg[1]>>8,l_us_arg[1]); 
1786   1              //}
1787   1              #endif  
1788   1              #endif
1789   1              return l_us_res_length;
1790   1      }
1791          
1792          #if (EXTRA_ENABLE == 1)
1793          //------------------------------------------------------------------------------------
1794          // To call various resets on OBDH
1795          //------------------------------------------------------------------------------------
1796          void callReset (unsigned char l_uc_reset_type)
1797          {
1798   1              //Mark various reset type
1799   1              if (l_uc_reset_type == OBDH_CMD_SW_RESET)
1800   1                      //Mark reset cause as RESET_SOURCE_OBDH_SW_RESET 
1801   1                      str_obdh_data.uc_sat_rstsrc = RESET_SOURCE_OBDH_SW_RESET;
1802   1              else if (l_uc_reset_type == OBDH_CMD_HW_RESET)
1803   1                      //Mark reset cause as RESET_SOURCE_OBDH_HW_RESET 
1804   1                      str_obdh_data.uc_sat_rstsrc = RESET_SOURCE_OBDH_HW_RESET;
1805   1              //Ian (20120905 11:11AM): This case is commented to further distinguish the cause of reset of the satelli
             -te
1806   1              //For many will call reset with OBDH_CMD_RESET_SAT argument, not just OBDH command
1807   1      //      else if (l_uc_reset_type == OBDH_CMD_RESET_SAT)
1808   1      //              //Mark reset cause as RESET_SOURCE_OBDH_COMMAND 
1809   1      //              str_obdh_data.uc_sat_rstsrc = RESET_SOURCE_OBDH_COMMAND;
1810   1      
1811   1              //Record reset event
1812   1              #if (EVENT_HANDLER_ENABLE == 1)
1813   1              #if (STORING_ENABLE == 1)
1814   1              eventHandler(g_us_function_module_error_code,OBDH_ADDR,l_uc_reset_type,
C51 COMPILER V9.02   LUXP_FUNCTION                                                         01/09/2014 12:21:17 PAGE 32  

1815   1                      0,str_obdh_data.uc_sat_rstsrc,0,0); 
1816   1              #endif
1817   1              #endif
1818   1      
1819   1              //Trigger various reset
1820   1              if (l_uc_reset_type == OBDH_CMD_SW_RESET)
1821   1                      //Software reset
1822   1                      swReset();
1823   1              else if (l_uc_reset_type == OBDH_CMD_HW_RESET)
1824   1                      //Hardware reset
1825   1                      hwReset();                                      
1826   1              else if (l_uc_reset_type == OBDH_CMD_RESET_SAT)
1827   1                      //Trigger satellite reset
1828   1                      resetSatellite();
1829   1      }
1830          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5733    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =   ----      25
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
