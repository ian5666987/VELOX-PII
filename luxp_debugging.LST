C51 COMPILER V9.02   LUXP_DEBUGGING                                                        01/09/2014 12:21:17 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE LUXP_DEBUGGING
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE luxp_debugging.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

*** WARNING C500 IN LINE 1 OF LUXP_DEBUGGING.C: LICENSE ERROR (R20D: CONTENT ERROR IN FLF FILE)

   1          //------------------------------------------------------------------------------------
   2          // Luxp_debugging.c
   3          //------------------------------------------------------------------------------------
   4          // Copyright (C) 2013 Nanyang Technological University.
   5          //
   6          // AUTH: IAN
   7          // DATE: 03 APR 2013
   8          //
   9          // The program Luxp_debugging.c will be downloaded to the Pumpkin Motherboard with 
  10          // C8051F120 uC as part of the VELOX-P Pico-Satellite Flight Software. 
  11          //
  12          // There is one main function contained in this file, namely
  13          // 1) Change Data
  14          //
  15          //------------------------------------------------------------------------------------
  16          
  17          #include <luxp_debugging.h>
  18          
  19          //------------------------------------------------------------------------------------
  20          // To change data of a variable
  21          //------------------------------------------------------------------------------------
  22          // Function's test result: untested
  23          //------------------------------------------------------------------------------------
  24          void changeData (unsigned short l_us_data_code, unsigned char l_uc_data_1, unsigned char l_uc_data_2, unsi
             -gned char l_uc_data_3, unsigned char l_uc_data_4)
  25          {
  26   1              unsigned char l_uc_data_code_header;
  27   1      
  28   1              l_uc_data_code_header = l_us_data_code >> 8;
  29   1      
  30   1              switch (l_uc_data_code_header){
  31   2      
  32   2                      #if (PWRS_CMD_ENABLE == 1)
  33   2      
  34   2                      //PWRS data
  35   2                      case PWRS_ADDR:
  36   2                              switch (l_us_data_code){
  37   3                                      case DATA_PWRS_HK_UC_MODE:
  38   3                                              str_pwrs_hk.uc_mode = l_uc_data_4;
  39   3                                              break;
  40   3      
  41   3                                      case DATA_PWRS_PAR_UC_BATT_CHARGE_UPP_LIMIT:
  42   3                                              str_pwrs_par.uc_batt_charge_upp_limit = l_uc_data_4;
  43   3                                              break;
  44   3      
  45   3                                      case DATA_PWRS_PAR_UC_BATT_CHARGE_LOW_LIMIT:
  46   3                                              str_pwrs_par.uc_batt_charge_low_limit = l_uc_data_4;
  47   3                                              break;
  48   3      
  49   3                                      case DATA_PWRS_US_PV_FV_1:
  50   3                                      case DATA_PWRS_US_PV_FV_2:
  51   3                                      case DATA_PWRS_US_PV_FV_3:
  52   3                                              str_pwrs_data.us_pv_fv[l_us_data_code-DATA_PWRS_US_PV_FV_1] = (unsigned short)(l_uc_data_3 << 8) + l_
             -uc_data_4;
C51 COMPILER V9.02   LUXP_DEBUGGING                                                        01/09/2014 12:21:17 PAGE 2   

  53   3                                              break;
  54   3      
  55   3                                      default:
  56   3                                              break;
  57   3                              }
  58   2                              break;
  59   2      
  60   2                      #endif
  61   2                      
  62   2                      #if (ADCS_CMD_ENABLE == 1)
  63   2      
  64   2                      //ADCS data
  65   2                      case ADCS_ADDR:
  66   2                              switch (l_us_data_code){
  67   3                                      case DATA_ADCS_PAR_S_SS_THRESHOLD:
  68   3                                              str_adcs_par.s_ss_threshold = (unsigned short)(l_uc_data_3 << 8) + l_uc_data_4;
  69   3                                              break;
  70   3      
  71   3                                      case DATA_ADCS_PAR_F_CGAIN_1:
  72   3                                      case DATA_ADCS_PAR_F_CGAIN_2:
  73   3                                      case DATA_ADCS_PAR_F_CGAIN_3:
  74   3                                      case DATA_ADCS_PAR_F_CGAIN_4:
  75   3                                      case DATA_ADCS_PAR_F_CGAIN_5:
  76   3                                      case DATA_ADCS_PAR_F_CGAIN_6:
  77   3                                      case DATA_ADCS_PAR_F_CGAIN_7:
  78   3                                      case DATA_ADCS_PAR_F_CGAIN_8:
  79   3                                      case DATA_ADCS_PAR_F_CGAIN_9:
  80   3                                      case DATA_ADCS_PAR_F_CGAIN_10:
  81   3                                      case DATA_ADCS_PAR_F_CGAIN_11:
  82   3                                      case DATA_ADCS_PAR_F_CGAIN_12:
  83   3                                      case DATA_ADCS_PAR_F_CGAIN_13:
  84   3                                      case DATA_ADCS_PAR_F_CGAIN_14:
  85   3                                      case DATA_ADCS_PAR_F_CGAIN_15:
  86   3                                      case DATA_ADCS_PAR_F_CGAIN_16:
  87   3                                      case DATA_ADCS_PAR_F_CGAIN_17:
  88   3                                      case DATA_ADCS_PAR_F_CGAIN_18:
  89   3                                              str_adcs_par.f_cgain[l_us_data_code-DATA_ADCS_PAR_F_CGAIN_1] = uchar2float(l_uc_data_1,l_uc_data_2,l_
             -uc_data_3,l_uc_data_4);
  90   3                                              break;
  91   3      
  92   3                                      case DATA_ADCS_PAR_F_TLE_EPOCH:
  93   3                                              str_adcs_par.f_tle_epoch = uchar2float(l_uc_data_1,l_uc_data_2,l_uc_data_3,l_uc_data_4);
  94   3                                              break;
  95   3      
  96   3                                      case DATA_ADCS_PAR_F_TLE_INC:
  97   3                                              str_adcs_par.f_tle_inc = uchar2float(l_uc_data_1,l_uc_data_2,l_uc_data_3,l_uc_data_4);
  98   3                                              break;
  99   3      
 100   3                                      case DATA_ADCS_PAR_F_TLE_RAAN:
 101   3                                              str_adcs_par.f_tle_raan = uchar2float(l_uc_data_1,l_uc_data_2,l_uc_data_3,l_uc_data_4);
 102   3                                              break;
 103   3      
 104   3                                      case DATA_ADCS_PAR_F_TLE_ARG_PER:
 105   3                                              str_adcs_par.f_tle_arg_per = uchar2float(l_uc_data_1,l_uc_data_2,l_uc_data_3,l_uc_data_4);
 106   3                                              break;
 107   3      
 108   3                                      case DATA_ADCS_PAR_F_TLE_ECC:
 109   3                                              str_adcs_par.f_tle_ecc = uchar2float(l_uc_data_1,l_uc_data_2,l_uc_data_3,l_uc_data_4);
 110   3                                              break;
 111   3      
 112   3                                      case DATA_ADCS_PAR_F_TLE_MA:
 113   3                                              str_adcs_par.f_tle_ma = uchar2float(l_uc_data_1,l_uc_data_2,l_uc_data_3,l_uc_data_4);
C51 COMPILER V9.02   LUXP_DEBUGGING                                                        01/09/2014 12:21:17 PAGE 3   

 114   3                                              break;
 115   3      
 116   3                                      case DATA_ADCS_PAR_US_TLE_MM:
 117   3                                              str_adcs_par.us_tle_mm = (unsigned short)(l_uc_data_3 << 8) + l_uc_data_4;
 118   3                                              break;
 119   3      
 120   3                                      case DATA_ADCS_PAR_UL_TIME:
 121   3                                              str_adcs_par.ul_time = uchar2ulong(l_uc_data_1,l_uc_data_2,l_uc_data_3,l_uc_data_4);
 122   3                                              break;
 123   3      
 124   3                                      case DATA_ADCS_PAR_S_VECTOR_2SUN_X:
 125   3                                      case DATA_ADCS_PAR_S_VECTOR_2SUN_Y:
 126   3                                      case DATA_ADCS_PAR_S_VECTOR_2SUN_Z:
 127   3                                              str_adcs_par.s_vector_2sun[l_us_data_code-DATA_ADCS_PAR_S_VECTOR_2SUN_X] = (unsigned short)(l_uc_data
             -_3 << 8) + l_uc_data_4;
 128   3                                              break;
 129   3      
 130   3                                      case DATA_ADCS_PAR_C_CTRL_BR_X:
 131   3                                      case DATA_ADCS_PAR_C_CTRL_BR_Y:
 132   3                                      case DATA_ADCS_PAR_C_CTRL_BR_Z:
 133   3                                              str_adcs_par.c_ctrl_br[l_us_data_code-DATA_ADCS_PAR_C_CTRL_BR_X] = l_uc_data_4;
 134   3                                              break;
 135   3      
 136   3                                      case DATA_ADCS_PAR_S_DGAIN:
 137   3                                              str_adcs_par.s_dgain = (unsigned short)(l_uc_data_3 << 8) + l_uc_data_4;
 138   3                                              break;
 139   3      
 140   3                                      default:
 141   3                                              break;
 142   3                              }
 143   2                              break;
 144   2      
 145   2                      #endif
 146   2                      
 147   2                      #if (OBDH_CMD_ENABLE == 1)
 148   2      
 149   2                      //OBDH data
 150   2                      //Ian (2012-05-15): comments are removed
 151   2                      case OBDH_ADDR:
 152   2                              switch (l_us_data_code){
 153   3                                      case DATA_OBDH_PAR_UC_MANUAL_CONTROL_ENABLED:
 154   3                                              str_obdh_par.uc_manual_control_enabled = l_uc_data_4;
 155   3                                              break;
 156   3      
 157   3                                      case DATA_OBDH_PAR_UC_NO_OF_INTERRUPT_PER_S:
 158   3                                              str_obdh_par.uc_no_of_interrupt_per_s = l_uc_data_4;
 159   3                                              break;
 160   3      
 161   3                                      case DATA_OBDH_PAR_UC_GSCH_TIME_WINDOW_10S:
 162   3                                              str_obdh_par.uc_gsch_time_window_10s = l_uc_data_4;
 163   3                                              break;
 164   3      
 165   3                                      case DATA_OBDH_PAR_UC_SOC_THRESHOLD_1:
 166   3                                      case DATA_OBDH_PAR_UC_SOC_THRESHOLD_2:
 167   3                                      case DATA_OBDH_PAR_UC_SOC_THRESHOLD_3:
 168   3                                      case DATA_OBDH_PAR_UC_SOC_THRESHOLD_4:
 169   3                                      case DATA_OBDH_PAR_UC_SOC_THRESHOLD_5:
 170   3                                      case DATA_OBDH_PAR_UC_SOC_THRESHOLD_6:
 171   3                                      case DATA_OBDH_PAR_UC_SOC_THRESHOLD_7:
 172   3                                      case DATA_OBDH_PAR_UC_SOC_THRESHOLD_8:
 173   3                                              str_obdh_par.uc_soc_threshold[l_us_data_code-DATA_OBDH_PAR_UC_SOC_THRESHOLD_1] = l_uc_data_4;
 174   3                                              break;
C51 COMPILER V9.02   LUXP_DEBUGGING                                                        01/09/2014 12:21:17 PAGE 4   

 175   3      
 176   3                                      case DATA_OBDH_PAR_US_REV_TIME_S:
 177   3                                              str_obdh_par.us_rev_time_s = (unsigned short)(l_uc_data_3 << 8) + l_uc_data_4;
 178   3                                              break;
 179   3      
 180   3                                      case DATA_OBDH_PAR_US_LOG_DATA_ID_1:
 181   3                                      case DATA_OBDH_PAR_US_LOG_DATA_ID_2:
 182   3                                      case DATA_OBDH_PAR_US_LOG_DATA_ID_3:
 183   3                                      case DATA_OBDH_PAR_US_LOG_DATA_ID_4:
 184   3                                      case DATA_OBDH_PAR_US_LOG_DATA_ID_5:
 185   3                                      case DATA_OBDH_PAR_US_LOG_DATA_ID_6:
 186   3                                      case DATA_OBDH_PAR_US_LOG_DATA_ID_7:
 187   3                                      case DATA_OBDH_PAR_US_LOG_DATA_ID_8:
 188   3                                              str_obdh_par.us_log_data_id[l_us_data_code-DATA_OBDH_PAR_US_LOG_DATA_ID_1] = (unsigned short)(l_uc_da
             -ta_3 << 8) + l_uc_data_4;
 189   3                                              break;
 190   3      
 191   3                                      case DATA_OBDH_PAR_US_BR_X_THRESHOLD_LOW:
 192   3                                      case DATA_OBDH_PAR_US_BR_Y_THRESHOLD_LOW:
 193   3                                      case DATA_OBDH_PAR_US_BR_Z_THRESHOLD_LOW:
 194   3                                              str_obdh_par.us_br_threshold_low[l_us_data_code-DATA_OBDH_PAR_US_BR_X_THRESHOLD_LOW] = (unsigned shor
             -t)(l_uc_data_3 << 8) + l_uc_data_4;
 195   3                                              break;
 196   3      
 197   3                                      case DATA_OBDH_PAR_US_BR_X_THRESHOLD_HIGH:
 198   3                                      case DATA_OBDH_PAR_US_BR_Y_THRESHOLD_HIGH:
 199   3                                      case DATA_OBDH_PAR_US_BR_Z_THRESHOLD_HIGH:
 200   3                                              str_obdh_par.us_br_threshold_high[l_us_data_code-DATA_OBDH_PAR_US_BR_X_THRESHOLD_HIGH] = (unsigned sh
             -ort)(l_uc_data_3 << 8) + l_uc_data_4;
 201   3                                              break;
 202   3      
 203   3                                      case DATA_OBDH_PAR_UC_BEACON_INTERVAL_M3:
 204   3                                      case DATA_OBDH_PAR_UC_BEACON_INTERVAL_M4_M5_M7:
 205   3                                      case DATA_OBDH_PAR_UC_BEACON_INTERVAL_M8:
 206   3                                      case DATA_OBDH_PAR_UC_BEACON_INTERVAL_COMM_ZONE:
 207   3                                              str_obdh_par.uc_beacon_interval[l_us_data_code-DATA_OBDH_PAR_UC_BEACON_INTERVAL_M3] = l_uc_data_4;
 208   3                                              break;
 209   3      
 210   3                                      case DATA_OBDH_PAR_UL_DET_UPTIME_LIMIT:
 211   3                                              str_obdh_par.ul_det_uptime_limit_s = uchar2ulong(l_uc_data_1,l_uc_data_2,l_uc_data_3,l_uc_data_4);
 212   3                                              break;
 213   3      
 214   3                                      #if (DEBUGGING_FEATURE == 1)
 215   3                                      case DATA_OBDH_UC_SCM_HOLD_ACTIVATION:
 216   3                                              g_uc_evha_flag &= ~HACVTN_FLAG_SCM;
 217   3                                              g_uc_evha_flag |= (l_uc_data_4 & HACVTN_FLAG_SCM);
 218   3                                              break;
 219   3      
 220   3                                      case DATA_OBDH_UC_TM_HOLD_ACTIVATION:
 221   3                                              g_uc_evha_flag &= ~HACVTN_FLAG_TM;
 222   3                                              g_uc_evha_flag |= (l_uc_data_4 & HACVTN_FLAG_TM);
 223   3                                              break;
 224   3      
 225   3                                      case DATA_OBDH_UC_AUTO_BEACON_ACTIVATION:
 226   3                                              if (l_uc_data_4) 
 227   3                                                      str_obdh_hk.us_beacon_flag &= ~BEACON_FLAG_AUTO_BEACON_DISABLE;
 228   3                                              else str_obdh_hk.us_beacon_flag |= BEACON_FLAG_AUTO_BEACON_DISABLE;                                                                             
 229   3                                              break;
 230   3                                      #endif
 231   3      
 232   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_1:
 233   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_2:
C51 COMPILER V9.02   LUXP_DEBUGGING                                                        01/09/2014 12:21:17 PAGE 5   

 234   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_3:
 235   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_4:
 236   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_5:
 237   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_6:
 238   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_7:
 239   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_8:
 240   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_9:
 241   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_10:
 242   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_11:
 243   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_12:
 244   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_13:
 245   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_14:
 246   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_15:
 247   3                                      case DATA_OBDH_US_INTERVAL_PERIOD_16:
 248   3                                              str_obdh_data.us_interval_period[l_us_data_code-DATA_OBDH_US_INTERVAL_PERIOD_1] = (unsigned short)(l_
             -uc_data_3 << 8) + l_uc_data_4;
 249   3                                              break;
 250   3      
 251   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_1:
 252   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_2:
 253   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_3:
 254   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_4:
 255   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_5:
 256   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_6:
 257   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_7:
 258   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_8:
 259   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_9:
 260   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_10:
 261   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_11:
 262   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_12:
 263   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_13:
 264   3                                      case DATA_OBDH_G_UC_FROM_TO_CALLSIGN_14:
 265   3                                              g_uc_from_to_callsign[l_us_data_code-DATA_OBDH_G_UC_FROM_TO_CALLSIGN_1] = l_uc_data_4;
 266   3                                              break;
 267   3      
 268   3                                      //Ian, 19-JUL-2012: to support satellite time reset
 269   3                                      case DATA_OBDH_G_UL_OBC_TIME:
 270   3                                              str_obdh_data.ul_obc_time_s = uchar2ulong(l_uc_data_1,l_uc_data_2,l_uc_data_3,l_uc_data_4);
 271   3                                              break;
 272   3      
 273   3                                      default:
 274   3                                              break;
 275   3                              }
 276   2                              break;
 277   2                      
 278   2                      #endif
 279   2      
 280   2                      default:
 281   2                              break;
 282   2      
 283   2              }
 284   1      }
 285          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1060    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.02   LUXP_DEBUGGING                                                        01/09/2014 12:21:17 PAGE 6   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
