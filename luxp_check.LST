C51 COMPILER V9.02   LUXP_CHECK                                                            01/09/2014 12:21:16 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE LUXP_CHECK
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE luxp_check.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

*** WARNING C500 IN LINE 1 OF LUXP_CHECK.C: LICENSE ERROR (R20D: CONTENT ERROR IN FLF FILE)

   1          //------------------------------------------------------------------------------------
   2          // Luxp_check.c
   3          //------------------------------------------------------------------------------------
   4          // Copyright (C) 2013 Nanyang Technological University.
   5          //
   6          // AUTH: IAN
   7          //               CHEW YAN CHONG
   8          // DATE: 03 APR 2013
   9          //
  10          // The program Luxp_check.c will be downloaded to the Pumpkin Motherboard with 
  11          // C8051F120 uC as part of the VELOX-P Pico-Satellite Flight Software. 
  12          //
  13          // This file contains checking functions of the Flight Software
  14          //
  15          // Starts from version 0.7x, only up to checksum 16-bit is supported. Checksum 32-bit
  16          // is removed
  17          //
  18          //------------------------------------------------------------------------------------
  19          // Overall functional test status
  20          //------------------------------------------------------------------------------------
  21          // Completely untested
  22          //
  23          //------------------------------------------------------------------------------------
  24          // Overall documentation status
  25          //------------------------------------------------------------------------------------
  26          // Minimally documented
  27          //------------------------------------------------------------------------------------
  28          
  29          #include <luxp_check.h>
  30          
  31          #if (CRC_ENABLE == 1)
  32          // private function (only visible to checksum.c)
  33          unsigned short Checksum_rotate(unsigned short crc, unsigned char value) {
  34   1        return ((crc << 8) + value) ^ g_us_crc16_table[(crc >> 8) & 0xFF];
  35   1      }
  36          
  37          // Ian: first call to checksum_update() should be with crc
  38          unsigned short Checksum_update(void* msg, short length, unsigned short crc) {
  39   1        short count = 0;
  40   1        char* message = (char*) msg;
  41   1        for (count = 0; count < length; ++count)
  42   1          crc = Checksum_rotate(crc, message[count]);
  43   1        return crc;
  44   1      }
  45          
  46          unsigned short Checksum_publish(unsigned short crc) {
  47   1        crc = Checksum_rotate(crc, 0);
  48   1        crc = Checksum_rotate(crc, 0);
  49   1        return crc;
  50   1      }
  51          
  52          //------------------------------------------------------------------------------------
  53          // To create CRC/Checksum bytes (16/32 bits)
  54          //------------------------------------------------------------------------------------
C51 COMPILER V9.02   LUXP_CHECK                                                            01/09/2014 12:21:16 PAGE 2   

  55          unsigned short createChecksum (unsigned char *l_uc_msg_pointer, unsigned short l_us_msg_length, unsigned c
             -har l_uc_checksum_type)
  56          {
  57   1              unsigned short  l_us_checksum_register = 0x0000;
  58   1              //Creating CRC bytes
  59   1              if (l_uc_checksum_type == CHECKSUM_CRC16_TABLE)
  60   1                      l_us_checksum_register = Checksum_publish(Checksum_update(l_uc_msg_pointer, l_us_msg_length, l_us_checks
             -um_register));
  61   1              else if (l_uc_checksum_type == CHECKSUM_16BIT)  //Creating checksum 16-bit
  62   1                      while (l_us_msg_length--) l_us_checksum_register += *l_uc_msg_pointer++;
  63   1      
  64   1              return l_us_checksum_register;
  65   1      }
  66          
  67          //------------------------------------------------------------------------------------
  68          // To add CRC/Checksum bytes created (16 Bits)
  69          //------------------------------------------------------------------------------------
  70          void addChecksumBytes16 (unsigned char *l_uc_msg_pointer, unsigned short l_us_msg_length, unsigned short l
             -_us_checksum_bytes)
  71          {
  72   1              *(l_uc_msg_pointer + l_us_msg_length)           = l_us_checksum_bytes >> 8;
  73   1              *(l_uc_msg_pointer + l_us_msg_length + 1)       = l_us_checksum_bytes;
  74   1      }
  75          
  76          //------------------------------------------------------------------------------------
  77          // To check wether CRC16 bytes of a message is matching
  78          //------------------------------------------------------------------------------------
  79          unsigned short checkCRC16Match (unsigned char *l_uc_msg_p, unsigned short l_us_msg_length)
  80          {
  81   1              unsigned short  l_us_matching_result = EC_SUCCESSFUL;
  82   1      
  83   1              unsigned short  l_us_read_checksum_bytes;
  84   1              unsigned short  l_us_expected_checksum_bytes;
  85   1      
  86   1              l_us_read_checksum_bytes                        = (unsigned short)(*(l_uc_msg_p + l_us_msg_length) << 8) + *(l_uc_msg_p + l_u
             -s_msg_length + 1);
  87   1              l_us_expected_checksum_bytes            = createChecksum(l_uc_msg_p,l_us_msg_length,CHECKSUM_CRC16_TABLE);
  88   1      
  89   1              if (l_us_read_checksum_bytes == l_us_expected_checksum_bytes)
  90   1                      l_us_matching_result = EC_SUCCESSFUL;
  91   1              else l_us_matching_result = EC_CRC_BYTES_DO_NOT_MATCH;
  92   1      
  93   1              return l_us_matching_result;
  94   1      }
  95          #endif
  96          
  97          #if (GROUND_STATION_COMMAND_HANDLER_ENABLE == 1)
  98          #if (ISIS_CMD_ENABLE == 1)
  99          //------------------------------------------------------------------------------------
 100          // To check a command received by GSCH, whether it passes time window check
 101          // The flag GSCH_FLAG_TIME_WINDOW_VALID will be raised if the GSCH command is valid.
 102          // The result will be different (GSCH_FLAG_TIME_WINDOW_VALID is not raised) if the
 103          // command is not valid.
 104          //------------------------------------------------------------------------------------
 105          void timeWindowCheck (void)
 106          {
 107   1              unsigned char l_uc_i;
 108   1              unsigned long l_ul_gdsn_time;
 109   1              unsigned long l_ul_lower_time_limit;
 110   1              unsigned long l_ul_upper_time_limit;
 111   1      
 112   1              //Assume it does not pass time window validation first
C51 COMPILER V9.02   LUXP_CHECK                                                            01/09/2014 12:21:16 PAGE 3   

 113   1              g_uc_gsch_flag &= ~GSCH_FLAG_TIME_WINDOW_VALID;
 114   1      
 115   1              //Get GDSN time 
 116   1              l_ul_gdsn_time = uchar2ulong(g_uc_gsch_gs_arg[0],g_uc_gsch_gs_arg[1],g_uc_gsch_gs_arg[2],g_uc_gsch_gs_arg
             -[3]);
 117   1              l_ul_gdsn_time ^= 0xFF00FF00;
 118   1      
 119   1              //Lock OBC time before being used
 120   1              g_ul = str_obdh_data.ul_obc_time_s + SECONDS_FROM_TAI_TO_KILL_SWITCH_DEACTIVATION;
 121   1      
 122   1              //Set lower time window limit
 123   1              l_ul_lower_time_limit = g_ul - (unsigned short)(str_obdh_par.uc_gsch_time_window_10s * 10);
 124   1      
 125   1              //Set upper time windoe limit
 126   1              l_ul_upper_time_limit = g_ul + (unsigned short)(str_obdh_par.uc_gsch_time_window_10s * 10);
 127   1      
 128   1              //Check if the GDSN time passes time window
 129   1              if ((l_ul_gdsn_time >= l_ul_lower_time_limit) && (l_ul_gdsn_time <= l_ul_upper_time_limit)){
 130   2                      //Set time window validation flag
 131   2                      g_uc_gsch_flag |= GSCH_FLAG_TIME_WINDOW_VALID;
 132   2      
 133   2                      //Shift the command argument
 134   2                      for (l_uc_i = 0; l_uc_i < MAX_GSCH_CMD_ARG_LEN-4; l_uc_i++)
 135   2                              g_uc_gsch_gs_arg[l_uc_i] = g_uc_gsch_gs_arg[l_uc_i+4];
 136   2      
 137   2                      //Change the command length
 138   2                      g_uc_gsch_gs_arg_len = (g_uc_gsch_gs_arg_len < 4) ? 0 : (g_uc_gsch_gs_arg_len-4);
 139   2      
 140   2                      //Delete the excessive bytes
 141   2                      //Ian (2012-05-15): the excessive bytes to be deleted here are the last four, following the shift
 142   2                      //                                      of the command argument as shown above.
 143   2                      for (l_uc_i = MAX_GSCH_CMD_ARG_LEN-4; l_uc_i < MAX_GSCH_CMD_ARG_LEN; l_uc_i++)
 144   2                              g_uc_gsch_gs_arg[l_uc_i] = 0;
 145   2              }       
 146   1      }
 147          
 148          #if (SATELLITE_SCHEDULE_HANDLER_ENABLE == 1)
 149          //------------------------------------------------------------------------------------
 150          // To check if there is ADCS data in Log Data Type
 151          //------------------------------------------------------------------------------------
 152          unsigned char checkADCSDataInLogDataType (void){
 153   1              unsigned char l_uc_adcs_data_present = 0;
 154   1              unsigned char l_uc_i = 0;
 155   1      
 156   1              for (l_uc_i = 0; l_uc_i < MAX_NO_OF_DATA_TYPE_LOGGED; l_uc_i++)
 157   1                      if ((str_obdh_par.us_log_data_id[l_uc_i] >> 8) == ADCS_ADDR) {
 158   2                              l_uc_adcs_data_present = 0xff;
 159   2                              break;
 160   2                      }
 161   1      
 162   1              return l_uc_adcs_data_present;
 163   1      }
 164          #endif
 165          #endif
 166          #endif
 167          
 168          //------------------------------------------------------------------------------------
 169          // To check event and eventually log into SD
 170          //dec22_yc
 171          //------------------------------------------------------------------------------------
 172          /*
 173          unsigned char g_uc_eventlog_data_buffer[EVENTLOG_DATA_BUFFER_SIZE] = 0;
C51 COMPILER V9.02   LUXP_CHECK                                                            01/09/2014 12:21:16 PAGE 4   

 174          unsigned short g_us_no_of_eventlog_this_orbit = 0;
 175          unsigned char g_uc_eventlog_status_flag = 0;//missing logs... full logs, time to save log to SD
 176          */
 177          //dec22_yc tested
 178          #if (EVENT_HANDLER_ENABLE == 1)
 179          #if (STORING_ENABLE == 1)
 180          void eventHandler (unsigned short l_us_error_code, unsigned char l_uc_event_arg_0,unsigned char l_uc_event
             -_arg_1,
 181                                                          unsigned char l_uc_event_arg_2,unsigned char l_uc_event_arg_3,unsigned char l_uc_event_arg_4,unsigne
             -d char l_uc_event_arg_5){
 182   1              
 183   1              unsigned short l_us_data_counter=0;
 184   1              unsigned char l_uc_temp;
 185   1              
 186   1              //As str_obdh_data.ul_obc_time_s might have been updated in the midst of function execution (due to inter
             -rupt)
 187   1              //the value is first captured in the beginning of the function
 188   1              g_ul = str_obdh_data.ul_obc_time_s + SECONDS_FROM_TAI_TO_KILL_SWITCH_DEACTIVATION;      
 189   1                      
 190   1              // flag set 1: is the event buffer full or g_us_no_of_eventlog_this_orbit full?
 191   1              //Style justified.
 192   1              if((g_uc_eventlog_status_flag & EVENTLOG_STATUS_REQUIRE_SAVING) || (g_uc_eventlog_status_flag & EVENTLOG_
             -STATUS_FULL)){
 193   2                      g_uc_eventlog_status_flag |= EVENTLOG_STATUS_MISSING_ENTRY;     //event not logged
 194   2              }
 195   1              else{ 
 196   2                      l_us_data_counter=(g_us_no_of_eventlog_this_orbit % NO_OF_EVENTLOG_DATA_SET_PER_BLOCK) * EVENTLOG_DATA_S
             -ET_SIZE;
 197   2                      
 198   2                      // execution step 1 : missing events due to last event unable to log.
 199   2                      if(g_uc_eventlog_status_flag & EVENTLOG_STATUS_MISSING_ENTRY){  
 200   3                              l_us_data_counter = insertLongToArray(g_ul,g_uc_eventlog_data_buffer,l_us_data_counter);//yc added 2012
             -0224
 201   3                              g_uc_eventlog_data_buffer[l_us_data_counter++]=EV_EVENT_HANDLER>>8;
 202   3                              g_uc_eventlog_data_buffer[l_us_data_counter++]=g_uc_eventlog_status_flag;
 203   3                              g_us_no_of_eventlog_this_orbit++;
 204   3                              
 205   3                              g_uc_eventlog_status_flag &= ~EVENTLOG_STATUS_MISSING_ENTRY;//flag clear 1: update flag when done
 206   3                      }
 207   2                      //execution step 2: event save to g_uc_eventlog_data_buffer
 208   2                      //dec22_yc prevent buffer overflow check
 209   2                      l_us_data_counter=(g_us_no_of_eventlog_this_orbit % NO_OF_EVENTLOG_DATA_SET_PER_BLOCK) * EVENTLOG_DATA_S
             -ET_SIZE;
 210   2      
 211   2                      if(l_us_data_counter<EVENTLOG_DATA_BUFFER_SIZE){
 212   3      
 213   3                              l_us_data_counter = insertLongToArray(g_ul,g_uc_eventlog_data_buffer,l_us_data_counter); //yc added 201
             -20224        
 214   3                              
 215   3                              g_uc_eventlog_data_buffer[l_us_data_counter++]=l_us_error_code>>8;
 216   3                              g_uc_eventlog_data_buffer[l_us_data_counter++]=l_us_error_code;
 217   3                              
 218   3                              g_uc_eventlog_data_buffer[l_us_data_counter++]=l_uc_event_arg_0;
 219   3                              g_uc_eventlog_data_buffer[l_us_data_counter++]=l_uc_event_arg_1;
 220   3                              g_uc_eventlog_data_buffer[l_us_data_counter++]=l_uc_event_arg_2;
 221   3                              g_uc_eventlog_data_buffer[l_us_data_counter++]=l_uc_event_arg_3;
 222   3                              g_uc_eventlog_data_buffer[l_us_data_counter++]=l_uc_event_arg_4;
 223   3                              g_uc_eventlog_data_buffer[l_us_data_counter++]=l_uc_event_arg_5;
 224   3                              g_us_no_of_eventlog_this_orbit++;
 225   3                      }
 226   2                      
 227   2                      //flag set 2: check after adding this event is the g_us_no_of_eventlog_this_orbit almost full?
C51 COMPILER V9.02   LUXP_CHECK                                                            01/09/2014 12:21:16 PAGE 5   

 228   2                      if(g_us_no_of_eventlog_this_orbit>(NO_OF_EVENTLOG_DATA_SET_PER_BLOCK*100-3)){//estimate 100 min per loop
             -, of same size as WOD maximum  dec22_yc testing purposes set as 50 full.
 229   3      
 230   3                              //dec22_yc moved up to update flag prior to saving tested.
 231   3                              g_uc_eventlog_status_flag |= EVENTLOG_STATUS_FULL; //update full flag when done this is to be cleared w
             -hen orbit number changed, 
 232   3                              g_uc_eventlog_status_flag |= EVENTLOG_STATUS_REQUIRE_SAVING; //force saving to SD once.
 233   3      
 234   3                              g_ul = str_obdh_data.ul_obc_time_s + SECONDS_FROM_TAI_TO_KILL_SWITCH_DEACTIVATION;
 235   3                              l_us_data_counter = insertLongToArray(g_ul,g_uc_eventlog_data_buffer,l_us_data_counter);//yc added 2012
             -0224        
 236   3                              
 237   3                              g_uc_eventlog_data_buffer[l_us_data_counter++]=EV_EVENT_HANDLER>>8;
 238   3                              g_uc_eventlog_data_buffer[l_us_data_counter++]=g_uc_eventlog_status_flag;
 239   3                              g_us_no_of_eventlog_this_orbit++;                                       
 240   3                      }               
 241   2                      //flag set 3: check after adding this event is there a need to save to SD card?
 242   2                      if((g_us_no_of_eventlog_this_orbit % NO_OF_EVENTLOG_DATA_SET_PER_BLOCK)==0){    
 243   3                              g_uc_eventlog_status_flag |= EVENTLOG_STATUS_REQUIRE_SAVING;    //saving required next          
 244   3                      }
 245   2                              
 246   2              }
 247   1      
 248   1              //flag clear 2 : reset g_us_no_of_eventlog_this_orbit if changed orbit no.
 249   1              //dec22_yc moved down to include check even if orbit is full
 250   1              //last entry in an orbit round is EV_ORBIT_UPDATE_HANDLER.. save to SD to prepare fresh page for new orbi
             -t
 251   1              if(l_us_error_code==EV_ORBIT_UPDATE_HANDLER){
 252   2                      g_uc_eventlog_status_flag |= EVENTLOG_STATUS_REQUIRE_SAVING; //force saving to SD once
 253   2                      g_uc_eventlog_status_flag &= ~EVENTLOG_STATUS_FULL;//update flag when done
 254   2                      g_us_no_of_eventlog_this_orbit = 0;     //reset buffer
 255   2              }
 256   1      
 257   1              //execution step 3: g_uc_eventlog_data_buffer required to save to SD dec22_yc
 258   1              if( g_uc_eventlog_status_flag & EVENTLOG_STATUS_REQUIRE_SAVING){
 259   2                      l_uc_temp = g_uc_strsnd_flag;
 260   2                      g_uc_strsnd_flag &= ~STRNG_FLAG_SAVE_DATA_HOLD;
 261   2                      if(!saveDataProtected(ALL_SUBSYSTEMS,SD_EVENTLOG_DATA,g_uc_temporary_data_buffer)){
 262   3                              for(l_us_data_counter=0;l_us_data_counter<EVENTLOG_DATA_BUFFER_SIZE;l_us_data_counter++)        
 263   3                                      g_uc_eventlog_data_buffer[l_us_data_counter] = 0;       //reset buffer
 264   3                              g_uc_eventlog_status_flag &= ~EVENTLOG_STATUS_REQUIRE_SAVING;//flag clear 3: update flag when done
 265   3                      }
 266   2                      g_uc_strsnd_flag = l_uc_temp;
 267   2              }        
 268   1      }
 269          
 270          //yc added 20120224
 271          void eventHandlerUpdateStateMode (unsigned char l_uc_sat_mode_next)
 272          {               
 273   1              eventHandler(EV_SATELLITE_MODE_HANDLER,str_obdh_hk.uc_sat_mode,l_uc_sat_mode_next,
 274   1                      str_obdh_hk.us_brh_flag>>8,str_obdh_hk.us_brh_flag,
 275   1                      str_obdh_hk.us_imh_flag>>8,str_obdh_hk.us_imh_flag);
 276   1      }
 277          
 278          #if (SATELLITE_MODE_HANDLER_ENABLE == 1)
 279          #if (SAFE_MODE_HANDLER_ENABLE == 1)
 280          #if (ADCS_CMD_ENABLE == 1)
 281          #if (PWRS_CMD_ENABLE == 1)
 282          //yc added 20120224
 283          void eventHandlerSafeholdMode (void)
 284          {
 285   1              //yc added 20120224
C51 COMPILER V9.02   LUXP_CHECK                                                            01/09/2014 12:21:16 PAGE 6   

 286   1              eventHandler(EV_SMH_HANDLER,str_obdh_hk.uc_smh_flag,str_obdh_data.uc_batt_soc,0,0,0,0);
 287   1      }
 288          #endif
 289          #endif
 290          #endif                  
 291          #endif                  
 292          
 293          #endif
 294          #endif                  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1471    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      59
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
