C51 COMPILER V9.02   LUXP_ISIS                                                             01/09/2014 12:21:19 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE LUXP_ISIS
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE luxp_ISIS.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

*** WARNING C500 IN LINE 1 OF LUXP_ISIS.C: LICENSE ERROR (R20D: CONTENT ERROR IN FLF FILE)

   1          //------------------------------------------------------------------------------------
   2          // Luxp_ISIS.c
   3          //------------------------------------------------------------------------------------
   4          // Copyright (C) 2013 Nanyang Technological University.
   5          //
   6          // AUTH: IAN
   7          // DATE: 03 APR 2013
   8          //
   9          // The program Luxp_ISIS.c will be downloaded to the Pumpkin Motherboard with 
  10          // C8051F120 uC as part of the VELOX-P Pico-Satellite Flight Software. 
  11          //
  12          // This file contains all functions related to communication with
  13          // ISIS IMC and ITS boards.
  14          //
  15          //------------------------------------------------------------------------------------
  16          // Overall functional test status
  17          //------------------------------------------------------------------------------------
  18          // Completely tested, some fully functional
  19          //
  20          //------------------------------------------------------------------------------------
  21          // Overall documentation status
  22          //------------------------------------------------------------------------------------
  23          // Minimally documented
  24          //------------------------------------------------------------------------------------
  25          
  26          #include <luxp_ISIS.h>
  27          
  28          #if (ISIS_CMD_ENABLE == 1)
  29          //------------------------------------------------------------------------------------
  30          // ISIS to get all housekeeping info
  31          //------------------------------------------------------------------------------------
  32          // Function's test result: fully functional
  33          //------------------------------------------------------------------------------------
  34          #if (DEBUGGING_FEATURE == 1)
  35          unsigned short isisGetHousekeeping (unsigned char l_uc_record_time_par) 
  36          #else
              unsigned short isisGetHousekeeping (void) 
              #endif
  39          {
  40   1              unsigned short l_us_error_code[11] = EC_INIT;
  41   1              unsigned short l_us_error_indicator = EC_SUCCESSFUL;
  42   1              unsigned char l_uc_i;
  43   1              unsigned char l_uc_ec_counter = 0;
  44   1      
  45   1              #if (DEBUGGING_FEATURE == 1)
  46   1              //To initialize time recording (if assigned)
  47   1              if(l_uc_record_time_par & 0x01) startTiming();
  48   1              #endif
  49   1      
  50   1              //Get all housekeeping data
  51   1              //It is noted that individual error code could be collectively made into one-variable flags' collection
  52   1              // if an alternative style of writing code is implemented (20120328)
  53   1              l_us_error_code[l_uc_ec_counter++] = isisI2C(IMC_ADDR,IMC_I2C_REC_DOFF,0x00);
  54   1              l_us_error_code[l_uc_ec_counter++] = isisI2C(IMC_ADDR,IMC_I2C_REC_SSTR,0x00);
C51 COMPILER V9.02   LUXP_ISIS                                                             01/09/2014 12:21:19 PAGE 2   

  55   1              l_us_error_code[l_uc_ec_counter++] = isisI2C(IMC_ADDR,IMC_I2C_TRN_RPOW,0x00);
  56   1              l_us_error_code[l_uc_ec_counter++] = isisI2C(IMC_ADDR,IMC_I2C_TRN_FPOW,0x00);
  57   1              l_us_error_code[l_uc_ec_counter++] = isisI2C(IMC_ADDR,IMC_I2C_TRN_ICON,0x00);
  58   1              l_us_error_code[l_uc_ec_counter++] = isisI2C(IMC_ADDR,IMC_I2C_REC_ICON,0x00);
  59   1              l_us_error_code[l_uc_ec_counter++] = isisI2C(IMC_ADDR,IMC_I2C_POW_AMPT,0x00);
  60   1              l_us_error_code[l_uc_ec_counter++] = isisI2C(IMC_ADDR,IMC_I2C_POW_BUSV,0x00);
  61   1              l_us_error_code[l_uc_ec_counter++] = isisI2C(IMC_ADDR,IMC_I2C_REC_UPTM,0x00);
  62   1              l_us_error_code[l_uc_ec_counter++] = isisI2C(ITC_ADDR,ITC_I2C_TRN_UPTM,0x00);
  63   1              l_us_error_code[l_uc_ec_counter++] = isisI2C(ITC_ADDR,ITC_I2C_TRN_STATE,0x00);
  64   1      
  65   1              //It is noted that l_us_error_code[11] has different meaning from the rests of l_us_error_code[]
  66   1              //For clarification, the variable name is changed to l_us_error_indicator
  67   1              //Ian (2012-05-15): g_us_latest_comm_hk_ec = EC_SUCCESSFUL; statement is moved out from the for loop
  68   1              g_us_latest_comm_hk_ec = EC_SUCCESSFUL;
  69   1              for (l_uc_i = 0; l_uc_i < l_uc_ec_counter; l_uc_i++){
  70   2                      l_us_error_indicator += l_us_error_code[l_uc_i];
  71   2                      if (l_us_error_indicator) {
  72   3                              g_us_latest_comm_hk_ec = EC_GET_COMM_HK_FAIL;
  73   3                              break;
  74   3                      }
  75   2              }
  76   1      
  77   1              #if (DEBUGGING_FEATURE == 1)
  78   1              //To end time recording (if assigned)
  79   1              if (l_uc_record_time_par & 0x01) endTiming();
  80   1              #endif
  81   1      
  82   1              //Return the cause of error if there is any error code
  83   1              //Ian (2012-05-15): error indicator is returned 
  84   1              return l_us_error_indicator;
  85   1      }
  86          
  87          //------------------------------------------------------------------------------------
  88          // ISIS All I2C functions without parameters (except messaging)
  89          //------------------------------------------------------------------------------------
  90          // Function's test result: fully functional
  91          //------------------------------------------------------------------------------------
  92          unsigned short isisI2C (unsigned char l_uc_isis_board_addr, unsigned char l_uc_msg_out, unsigned char l_uc
             -_func_par) 
  93          {
  94   1              unsigned short l_us_error_code = EC_INIT;
  95   1      
  96   1              #if (DEBUGGING_FEATURE == 1)
  97   1              //To initialize time recording (if assigned)
  98   1              if(l_uc_func_par & 0x01) startTiming();
  99   1              #endif
 100   1      
 101   1              //To initialize and assign transmission parameters      
 102   1              g_uc_i2c_msg_out = l_uc_msg_out;
 103   1              
 104   1              if (l_uc_isis_board_addr == IMC_ADDR){ //Handle message for IMC
 105   2      
 106   2                      g_uc_i2c_target = IMC_ADDR;
 107   2                      g_uc_i2c_transferred_byte_out = IMC_I2C_WR;
 108   2                      g_uc_i2c_data_out[0] = l_uc_msg_out;
 109   2      
 110   2                      switch (l_uc_msg_out){
 111   3                              case IMC_I2C_RESET:
 112   3                                      l_uc_func_par |= 0x04;  //write
 113   3                                      break;
 114   3              
 115   3                              case IMC_I2C_GET_NOFR:
C51 COMPILER V9.02   LUXP_ISIS                                                             01/09/2014 12:21:19 PAGE 3   

 116   3                                      g_uc_i2c_transferred_byte_in = IMC_I2C_GET_NOFR_RD;
 117   3                                      l_uc_func_par |= 0x0E;  //write, read, and store
 118   3                                      break;
 119   3              
 120   3                              case IMC_I2C_GET_FR:
 121   3                                      g_uc_i2c_transferred_byte_in = IMC_I2C_GET_FR_RD;                       
 122   3                                      l_uc_func_par |= 0x06;  //write and read
 123   3                                      break;
 124   3              
 125   3                              case IMC_I2C_RMV_FR:
 126   3                                      l_uc_func_par |= 0x04;  //write
 127   3                                      break;
 128   3              
 129   3                              case IMC_I2C_REC_DOFF:
 130   3                                      g_uc_i2c_transferred_byte_in = IMC_I2C_REC_DOFF_RD;
 131   3                                      l_uc_func_par |= 0x0E;  //write, read, and store        
 132   3                                      break;
 133   3              
 134   3                              case IMC_I2C_REC_SSTR:
 135   3                                      g_uc_i2c_transferred_byte_in = IMC_I2C_REC_SSTR_RD;
 136   3                                      l_uc_func_par |= 0x0E;  //write, read, and store                
 137   3                                      break;
 138   3              
 139   3                              case IMC_I2C_TRN_RPOW:
 140   3                                      g_uc_i2c_transferred_byte_in = IMC_I2C_TRN_RPOW_RD;                     
 141   3                                      l_uc_func_par |= 0x0E;  //write, read, and store                
 142   3                                      break;
 143   3              
 144   3                              case IMC_I2C_TRN_FPOW:
 145   3                                      g_uc_i2c_transferred_byte_in = IMC_I2C_TRN_FPOW_RD;
 146   3                                      l_uc_func_par |= 0x0E;  //write, read, and store
 147   3                                      break;
 148   3              
 149   3                              case IMC_I2C_TRN_ICON:
 150   3                                      g_uc_i2c_transferred_byte_in = IMC_I2C_TRN_ICON_RD;
 151   3                                      l_uc_func_par |= 0x0E;  //write, read, and store        
 152   3                                      break;
 153   3              
 154   3                              case IMC_I2C_REC_ICON:
 155   3                                      g_uc_i2c_transferred_byte_in = IMC_I2C_REC_ICON_RD;
 156   3                                      l_uc_func_par |= 0x0E;  //write, read, and store                
 157   3                                      break;
 158   3              
 159   3                              case IMC_I2C_POW_AMPT:
 160   3                                      g_uc_i2c_transferred_byte_in = IMC_I2C_POW_AMPT_RD;     
 161   3                                      l_uc_func_par |= 0x0E;  //write, read, and store                        
 162   3                                      break;
 163   3              
 164   3                              case IMC_I2C_POW_BUSV:
 165   3                                      g_uc_i2c_transferred_byte_in = IMC_I2C_POW_BUSV_RD;
 166   3                                      l_uc_func_par |= 0x0E;  //write, read, and store                        
 167   3                                      break;
 168   3              
 169   3                              case IMC_I2C_POW_BUSV_ICON:
 170   3                                      g_uc_i2c_transferred_byte_in = IMC_I2C_POW_BUSV_ICON_RD;
 171   3                                      l_uc_func_par |= 0x0E;  //write, read, and store                        
 172   3                                      break;
 173   3              
 174   3                              case IMC_I2C_REC_UPTM:
 175   3                                      g_uc_i2c_transferred_byte_in = IMC_I2C_REC_UPTM_RD;
 176   3                                      l_uc_func_par |= 0x0E;  //write, read, and store                        
 177   3                                      break;
C51 COMPILER V9.02   LUXP_ISIS                                                             01/09/2014 12:21:19 PAGE 4   

 178   3              
 179   3                              default:
 180   3                                      break;
 181   3                      }
 182   2              }
 183   1              
 184   1              else{ //Handle message for ITC
 185   2                      g_uc_i2c_target = ITC_ADDR;
 186   2                      g_uc_i2c_data_out[0] = g_uc_i2c_msg_out;
 187   2      
 188   2                      switch (l_uc_msg_out){
 189   3                              case ITC_I2C_RESET:
 190   3                                      g_uc_i2c_transferred_byte_out = ITC_I2C_WR;
 191   3                                      l_uc_func_par |= 0x84;  //write, special update
 192   3                                      break;
 193   3      
 194   3                              case ITC_I2C_CLR_BCN:
 195   3                                      g_uc_i2c_transferred_byte_out = ITC_I2C_WR;
 196   3                                      l_uc_func_par |= 0x84;  //write, special update
 197   3                                      break;
 198   3      
 199   3                              case ITC_I2C_TRN_UPTM:
 200   3                                      g_uc_i2c_transferred_byte_out = ITC_I2C_WR;
 201   3                                      g_uc_i2c_transferred_byte_in = ITC_I2C_TRN_UPTM_RD;
 202   3                                      l_uc_func_par |= 0x0E;  //write, read, store
 203   3                                      break;
 204   3      
 205   3                              case ITC_I2C_TRN_STATE:
 206   3                                      g_uc_i2c_transferred_byte_out = ITC_I2C_WR;
 207   3                                      g_uc_i2c_transferred_byte_in = ITC_I2C_TRN_STATE_RD;
 208   3                                      l_uc_func_par |= 0x0E;  //write, read, store
 209   3                                      break;
 210   3      
 211   3                              default:
 212   3                                      break;
 213   3                      }               
 214   2              }
 215   1      
 216   1              //If there is data out bit, transmit I2C command
 217   1              if (l_uc_func_par & 0x04) 
 218   1                      l_us_error_code = i2cWrite();
 219   1      
 220   1              //If there is data in bit, retrieve I2C data
 221   1              if (l_uc_func_par & 0x02){
 222   2                      if (l_us_error_code == EC_SUCCESSFUL)
 223   2                              l_us_error_code = i2cWaitRead(TIME_DELAY_ISIS_I2C_CMD_WAITING_TENTH_MS,TIME_DELAY_ISIS_I2C_CMD_DELAY_TE
             -NTH_MS);
 224   2              }
 225   1      
 226   1              //If there is a special update, and no error code, update it
 227   1              if ((l_uc_func_par & 0x80) && (!l_us_error_code)){
 228   2                      str_obdh_hk.uc_ax25_bit_rate_par        = BITRATE_1200;
 229   2                      str_obdh_hk.us_cw_char_rate_par = 0x0006;                       
 230   2              }
 231   1      
 232   1              //If there is store bit, and the reading is successful, store the I2C data.
 233   1              if (!l_us_error_code && (l_uc_func_par & 0x08))
 234   1                      storeISIS();
 235   1      
 236   1              #if (DEBUGGING_FEATURE == 1)
 237   1              //To end time recording (if assigned)
 238   1              if (l_uc_func_par & 0x01) endTiming();
C51 COMPILER V9.02   LUXP_ISIS                                                             01/09/2014 12:21:19 PAGE 5   

 239   1              #endif
 240   1      
 241   1              return l_us_error_code;
 242   1      }
 243          
 244          //------------------------------------------------------------------------------------
 245          // ISIS All I2C functions with parameters (except messaging)
 246          //------------------------------------------------------------------------------------
 247          // Function's test result: fully functional
 248          //------------------------------------------------------------------------------------
 249          unsigned short isisI2CPar (unsigned char l_uc_msg_out, unsigned short l_us_msg_par, unsigned char l_uc_fun
             -c_par) 
 250          {
 251   1              unsigned short l_us_error_code = EC_INIT;
 252   1              unsigned short l_us_value_assigned;
 253   1      
 254   1              #if (DEBUGGING_FEATURE == 1)
 255   1              //To initialize time recording (if assigned)
 256   1              if(l_uc_func_par & 0x01) startTiming();
 257   1              #endif
 258   1      
 259   1              //To initialize and assign transmission parameters      
 260   1              g_uc_i2c_msg_out = l_uc_msg_out;                
 261   1              g_uc_i2c_target = ITC_ADDR;
 262   1              g_uc_i2c_data_out[0] = g_uc_i2c_msg_out;
 263   1      
 264   1              switch (l_uc_msg_out){
 265   2                      case ITC_I2C_SET_TRN_IDLE:
 266   2                              g_uc_i2c_transferred_byte_out = ITC_I2C_SET_TRN_IDLE_WR;
 267   2                              l_uc_func_par |= 0x14;  //write, input par (1)
 268   2                              break;
 269   2      
 270   2                      case ITC_I2C_SET_TRN_OUTM:
 271   2                              g_uc_i2c_transferred_byte_out = ITC_I2C_SET_TRN_OUTM_WR;
 272   2                              l_uc_func_par |= 0x14;  //write, input par (1)
 273   2                              break;
 274   2      
 275   2                      case ITC_I2C_SET_AX_TRN_BRT:
 276   2                              g_uc_i2c_transferred_byte_out = ITC_I2C_SET_AX_TRN_BRT_WR;
 277   2                              l_uc_func_par |= 0x94;  //write, input par (1), special update
 278   2                              break;
 279   2      
 280   2                      case ITC_I2C_SET_CW_CHAR_RT:
 281   2                              g_uc_i2c_transferred_byte_out = ITC_I2C_SET_CW_CHAR_RT_WR;
 282   2                              l_uc_func_par |= 0xA4;  //write, input par (2), special update
 283   2                              break;
 284   2      
 285   2                      default:
 286   2                              break;
 287   2              }               
 288   1      
 289   1      
 290   1              //If there is input par bit, fill in the input parameters
 291   1              if (l_uc_func_par & 0x30){
 292   2                      if (l_uc_func_par & 0x10)       //1 bit input parameter case
 293   2                              g_uc_i2c_data_out[1] = l_us_msg_par & 0x00FF;
 294   2                      else{                                   //2 bits input parameter case
 295   3                              if (l_uc_msg_out == ITC_I2C_SET_CW_CHAR_RT)
 296   3                                      l_us_value_assigned = 600/l_us_msg_par;
 297   3                              else
 298   3                                      l_us_value_assigned = l_us_msg_par;
 299   3                              g_uc_i2c_data_out[1] = l_us_value_assigned;
C51 COMPILER V9.02   LUXP_ISIS                                                             01/09/2014 12:21:19 PAGE 6   

 300   3                              g_uc_i2c_data_out[2] = l_us_value_assigned >> 8;
 301   3                      }
 302   2              }
 303   1      
 304   1              //If there is data out bit, transmit I2C command
 305   1              if (l_uc_func_par & 0x04) 
 306   1                      l_us_error_code = i2cWrite();
 307   1      
 308   1              //If there is a special update, and no error code, update it
 309   1              if ((l_uc_func_par & 0x80) && (!l_us_error_code)){
 310   2                      if (l_uc_msg_out == ITC_I2C_SET_AX_TRN_BRT)
 311   2                              str_obdh_hk.uc_ax25_bit_rate_par        = l_us_value_assigned;
 312   2                      else if (l_uc_msg_out == ITC_I2C_SET_CW_CHAR_RT_WR)
 313   2                              str_obdh_hk.us_cw_char_rate_par = (unsigned short)(g_uc_i2c_data_out[2] << 8) + g_uc_i2c_data_out[1];           
             -        
 314   2              }
 315   1      
 316   1              #if (DEBUGGING_FEATURE == 1)
 317   1              //To end time recording (if assigned)
 318   1              if (l_uc_func_par & 0x01) endTiming();
 319   1              #endif
 320   1      
 321   1              return l_us_error_code;
 322   1      }
 323          
 324          //------------------------------------------------------------------------------------
 325          // ISIS All I2C functions with messaging
 326          //------------------------------------------------------------------------------------
 327          // Function's test result: fully functional
 328          //------------------------------------------------------------------------------------
 329          //The role of l_uc_func_par is made to combined for squeezing the byte used to determine
 330          //"property" of the function called. Might/might not be found so favourable.
 331          unsigned short isisI2CMsg (unsigned char l_uc_msg_out, unsigned short l_us_msg_par, unsigned short l_us_ms
             -g_length, unsigned char l_uc_func_par) 
 332          {
 333   1              unsigned short l_us_error_code = EC_INIT;
 334   1              unsigned short l_us_value_assigned;
 335   1              int l_i_counter;
 336   1      
 337   1              #if (DEBUGGING_FEATURE == 1)
 338   1              //To initialize time recording (if assigned)
 339   1              if(l_uc_func_par & 0x01) startTiming();
 340   1              #endif
 341   1      
 342   1              //To initialize and assign transmission parameters      
 343   1              g_uc_i2c_msg_out = l_uc_msg_out;
 344   1              
 345   1              //Handle message for ITC
 346   1              g_uc_i2c_target = ITC_ADDR;
 347   1              g_uc_i2c_data_out[0] = g_uc_i2c_msg_out;
 348   1      
 349   1              switch (l_uc_msg_out){
 350   2                      case ITC_I2C_SND_AX_FR_DFLT:
 351   2                              g_uc_itc_snd_ax_fr_dflt_wr = l_us_msg_length + 1;
 352   2                              g_uc_i2c_transferred_byte_out = g_uc_itc_snd_ax_fr_dflt_wr;     
 353   2                              l_uc_func_par |= 0x44;  //write, message
 354   2                              break;
 355   2      
 356   2                      case ITC_I2C_SND_AX_FR_OVRD:
 357   2                              g_uc_itc_snd_ax_fr_ovrd_wr = l_us_msg_length + AX25_CALLSIGN_SIZE + 1;
 358   2                              g_uc_i2c_transferred_byte_out = g_uc_itc_snd_ax_fr_ovrd_wr;
 359   2                              l_uc_func_par |= 0x44;  //write, message
C51 COMPILER V9.02   LUXP_ISIS                                                             01/09/2014 12:21:19 PAGE 7   

 360   2                              break;
 361   2      
 362   2                      case ITC_I2C_SND_CW_MSG:
 363   2                              g_uc_itc_snd_cw_msg_wr = l_us_msg_length + 1;
 364   2                              g_uc_i2c_transferred_byte_out = g_uc_itc_snd_cw_msg_wr;
 365   2                              l_uc_func_par |= 0x44;  //write, message        
 366   2                              break;
 367   2      
 368   2                      case ITC_I2C_SET_AX_BCN_DFLT:
 369   2                              g_uc_itc_set_ax_bcn_dflt_wr = l_us_msg_length + 3;
 370   2                              g_uc_i2c_transferred_byte_out = g_uc_itc_set_ax_bcn_dflt_wr;
 371   2                              l_uc_func_par |= 0x64;  //write, input par (2), message 
 372   2                              break;
 373   2      
 374   2                      case ITC_I2C_SET_AX_BCN_OVRD:
 375   2                              g_uc_itc_set_ax_bcn_ovrd_wr = l_us_msg_length + AX25_CALLSIGN_SIZE + 3;
 376   2                              g_uc_i2c_transferred_byte_out = g_uc_itc_set_ax_bcn_ovrd_wr;
 377   2                              l_uc_func_par |= 0x64;  //write, input par (2), message         
 378   2                              break;
 379   2      
 380   2                      case ITC_I2C_SET_CW_BCN:
 381   2                              g_uc_itc_set_cw_bcn_wr = l_us_msg_length + 3;
 382   2                              g_uc_i2c_transferred_byte_out = g_uc_itc_set_cw_bcn_wr; 
 383   2                              l_uc_func_par |= 0x64;  //write, input par (2), message         
 384   2                              break;
 385   2      
 386   2                      case ITC_I2C_SET_DFLT_AX_TO:
 387   2                              g_uc_i2c_transferred_byte_out = ITC_I2C_SET_DFLT_AX_TO_WR;
 388   2                              l_uc_func_par |= 0x44;  //write, message        
 389   2                              break;
 390   2      
 391   2                      case ITC_I2C_SET_DFLT_AX_FROM:
 392   2                              g_uc_i2c_transferred_byte_out = ITC_I2C_SET_DFLT_AX_FROM_WR;
 393   2                              l_uc_func_par |= 0x44;  //write, message        
 394   2                              break;
 395   2      
 396   2                      default:
 397   2                              break;
 398   2              }               
 399   1      
 400   1      
 401   1              //If there is input par bit, fill in the input parameters
 402   1              if (l_uc_func_par & 0x30){
 403   2                      if (l_uc_func_par & 0x10)       //1 byte input parameter case
 404   2                                                                              //This case is possible by direct user input or scheduled command.
 405   2                              g_uc_i2c_data_out[1] = l_us_msg_par;
 406   2                      else{                                   //2 bytes input parameter case
 407   3                              if (l_uc_msg_out == ITC_I2C_SET_CW_CHAR_RT)
 408   3                                      l_us_value_assigned = 600/l_us_msg_par;
 409   3                              else
 410   3                                      l_us_value_assigned = l_us_msg_par;
 411   3                              //The byte ordering is reversed (lo byte before hi byte)
 412   3                              //Due to ISIS hardware setting, which require the byte sent to be reversed for this case
 413   3                              g_uc_i2c_data_out[1] = l_us_value_assigned;
 414   3                              g_uc_i2c_data_out[2] = l_us_value_assigned >> 8;
 415   3                      }
 416   2              }
 417   1      
 418   1              //If there is msg par bit, fill in the message
 419   1              //Here an estimated transmission time for a single transmission is calculated as follow:
 420   1              //      1) For CW transmission
 421   1              //              g_us_expected_no_of_itn_checking_per_transmission = (14*l_us_msg_length*NO_OF_BEACON_CHECK_PER_S) / (
C51 COMPILER V9.02   LUXP_ISIS                                                             01/09/2014 12:21:19 PAGE 8   

             -str_obdh_hk.us_cw_char_rate_par*2)
 422   1              //      2) For AX.25 transmission
 423   1              //              g_us_expected_no_of_itn_checking_per_transmission = (11*NO_OF_BEACON_CHECK_PER_S)/4 + (l_us_msg_lengt
             -h*NO_OF_BEACON_CHECK_PER_S) / (str_obdh_hk.uc_ax25_bit_rate_par*150)
 424   1              //Set AX.25 beacon is used for recovery purpose, but send individual CW/AX.25 data is not used for recove
             -ry purpose
 425   1              //So, only send individual CW/AX.25 data is calculating g_us_expected_no_of_itn_checking_per_transmission
 426   1      
 427   1              //Except for segregation between initialization, value assignment, and actual sending, this software stru
             -cture is noticed to
 428   1              //be unfavorable, for it repeats the same switch case.
 429   1              //If the switch case is combined, however, the size of the code (after compiled and optimized) is not so 
             -different from
 430   1              //this segregation. 
 431   1              //It is not confirmed whether to change this style of writing.
 432   1      
 433   1              //Constant AX25_CALLSIGN_SIZE is used (20120328) 
 434   1              if (l_uc_func_par & 0x40){
 435   2                      switch (l_uc_msg_out){
 436   3                              case ITC_I2C_SND_AX_FR_DFLT:
 437   3                                      g_us_expected_no_of_itn_checking_per_transmission = (11*NO_OF_BEACON_CHECK_PER_S)/4 + (l_us_msg_length
             -*NO_OF_BEACON_CHECK_PER_S) / ((unsigned short)(str_obdh_hk.uc_ax25_bit_rate_par)*150);
 438   3                                      for (l_i_counter = 1; l_i_counter <= l_us_msg_length; l_i_counter++)                            
 439   3                                              g_uc_i2c_data_out[l_i_counter] = g_uc_ax25_message[l_i_counter-1]; 
 440   3                                      break;
 441   3      
 442   3                              case ITC_I2C_SND_AX_FR_OVRD: 
 443   3                                      g_us_expected_no_of_itn_checking_per_transmission = (11*NO_OF_BEACON_CHECK_PER_S)/4 + (l_us_msg_length
             -*NO_OF_BEACON_CHECK_PER_S) / ((unsigned short)(str_obdh_hk.uc_ax25_bit_rate_par)*150);
 444   3                                      for (l_i_counter = 1; l_i_counter <= AX25_CALLSIGN_SIZE; l_i_counter++)                                                         
 445   3                                              g_uc_i2c_data_out[l_i_counter] = g_uc_from_to_callsign[l_i_counter-1];
 446   3                                      for (l_i_counter = AX25_CALLSIGN_SIZE+1; l_i_counter <= (l_us_msg_length + AX25_CALLSIGN_SIZE); l_i_co
             -unter++)                 
 447   3                                              g_uc_i2c_data_out[l_i_counter] = g_uc_ax25_message[l_i_counter-AX25_CALLSIGN_SIZE-1];
 448   3                                      break;
 449   3      
 450   3                              case ITC_I2C_SND_CW_MSG: 
 451   3                                      g_us_expected_no_of_itn_checking_per_transmission = (14*l_us_msg_length*NO_OF_BEACON_CHECK_PER_S) / (s
             -tr_obdh_hk.us_cw_char_rate_par*2);
 452   3                                      for (l_i_counter = 1; l_i_counter <= l_us_msg_length; l_i_counter++)                            
 453   3                                              g_uc_i2c_data_out[l_i_counter] = g_uc_cw_message[l_i_counter-1];
 454   3                                      break;
 455   3      
 456   3                              case ITC_I2C_SET_AX_BCN_DFLT: 
 457   3                                      for (l_i_counter = 3; l_i_counter <= (l_us_msg_length + 2); l_i_counter++)                      
 458   3                                              g_uc_i2c_data_out[l_i_counter] = g_uc_ax25_message[l_i_counter-3];
 459   3                                      break;
 460   3      
 461   3                              case ITC_I2C_SET_AX_BCN_OVRD:
 462   3                                      for (l_i_counter = 3; l_i_counter <= AX25_CALLSIGN_SIZE + 2; l_i_counter++)                                                     
 463   3                                              g_uc_i2c_data_out[l_i_counter] = g_uc_from_to_callsign[l_i_counter-3];
 464   3                                      for (l_i_counter = AX25_CALLSIGN_SIZE + 3; l_i_counter <= (l_us_msg_length + AX25_CALLSIGN_SIZE + 2); 
             -l_i_counter++)                
 465   3                                              g_uc_i2c_data_out[l_i_counter] = g_uc_ax25_message[l_i_counter-AX25_CALLSIGN_SIZE-3];
 466   3                                      break;
 467   3      
 468   3                              case ITC_I2C_SET_CW_BCN:
 469   3                                      for (l_i_counter = 3; l_i_counter <= (l_us_msg_length + 2); l_i_counter++)                      
 470   3                                              g_uc_i2c_data_out[l_i_counter] = g_uc_cw_message[l_i_counter-3];
 471   3                                      break;
 472   3      
 473   3                              case ITC_I2C_SET_DFLT_AX_TO: 
C51 COMPILER V9.02   LUXP_ISIS                                                             01/09/2014 12:21:19 PAGE 9   

 474   3                                      for (l_i_counter = 1; l_i_counter <= 7; l_i_counter++)                                                          
 475   3                                              g_uc_i2c_data_out[l_i_counter] = g_uc_from_to_callsign[l_i_counter+6];
 476   3                                      break;
 477   3      
 478   3                              case ITC_I2C_SET_DFLT_AX_FROM: 
 479   3                                      for (l_i_counter = 1; l_i_counter <= 7; l_i_counter++)                                                          
 480   3                                              g_uc_i2c_data_out[l_i_counter] = g_uc_from_to_callsign[l_i_counter-1];
 481   3                                      break;
 482   3      
 483   3                              default:
 484   3                                      break;
 485   3                      }
 486   2              }
 487   1      
 488   1              //If there is data out bit, transmit I2C command
 489   1              if (l_uc_func_par & 0x04) 
 490   1                      l_us_error_code = i2cWrite();
 491   1      
 492   1              #if (DEBUGGING_FEATURE == 1)
 493   1              //To end time recording (if assigned)
 494   1              if (l_uc_func_par & 0x01) endTiming();
 495   1              #endif
 496   1      
 497   1              return l_us_error_code;
 498   1      }
 499          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1944    ----
   CONSTANT SIZE    =     22    ----
   XDATA SIZE       =   ----      51
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
