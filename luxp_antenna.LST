C51 COMPILER V9.02   LUXP_ANTENNA                                                          01/09/2014 12:21:16 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE LUXP_ANTENNA
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE luxp_antenna.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

*** WARNING C500 IN LINE 1 OF LUXP_ANTENNA.C: LICENSE ERROR (R20D: CONTENT ERROR IN FLF FILE)

   1          //------------------------------------------------------------------------------------
   2          // Luxp_antenna.c
   3          //------------------------------------------------------------------------------------
   4          // Copyright (C) 2013 Nanyang Technological University.
   5          //
   6          // AUTH: IAN
   7          // DATE: 03 APR 2013
   8          //
   9          // The program Luxp_antenna.c will be downloaded to the Pumpkin Motherboard with 
  10          // C8051F120 uC as part of the VELOX-P Pico-Satellite Flight Software. 
  11          //
  12          // This file contains all functions related to communication with
  13          // antenna deployment board.
  14          //
  15          //------------------------------------------------------------------------------------
  16          // Overall functional test status
  17          //------------------------------------------------------------------------------------
  18          // Completely tested, some fully functional
  19          //
  20          //------------------------------------------------------------------------------------
  21          // Overall documentation status
  22          //------------------------------------------------------------------------------------
  23          // Minimally documented
  24          //------------------------------------------------------------------------------------
  25          
  26          #include <luxp_antenna.h>
  27          
  28          #if (ANTENNA_CMD_ENABLE == 1)
  29          //------------------------------------------------------------------------------------
  30          // All antenna I2C functions without parameters
  31          //------------------------------------------------------------------------------------
  32          // Function's test result: fully functional
  33          //------------------------------------------------------------------------------------
  34          unsigned short antennaI2C (unsigned char l_uc_antenna_board_addr, unsigned char l_uc_msg_out, unsigned cha
             -r l_uc_func_par)
  35          {
  36   1              unsigned short l_us_error_code = EC_INIT;       
  37   1      
  38   1              #if (DEBUGGING_FEATURE == 1)
  39   1              //To initialize time recording (if assigned)
  40   1              if(l_uc_func_par & 0x01) startTiming();
  41   1              #endif
  42   1      
  43   1              //To initialize and assign transmission parameters      
  44   1              g_uc_i2c_msg_out = l_uc_msg_out;
  45   1              g_uc_i2c_target = l_uc_antenna_board_addr;      
  46   1              g_uc_i2c_transferred_byte_out = ANTENNA_I2C_WR;
  47   1              g_uc_i2c_data_out[0] = l_uc_msg_out;    
  48   1      
  49   1              //Message out switch case
  50   1              switch (l_uc_msg_out){
  51   2                      case ANTENNA_I2C_RESET:
  52   2                      case ANTENNA_I2C_ARM:
  53   2                      case ANTENNA_I2C_DISARM:
C51 COMPILER V9.02   LUXP_ANTENNA                                                          01/09/2014 12:21:16 PAGE 2   

  54   2                      case ANTENNA_I2C_CANCEL_DPLY:
  55   2                              l_uc_func_par |= 0x04;  //write
  56   2                              break;
  57   2      
  58   2                      case ANTENNA_I2C_GET_DPLY_1_COUNT:
  59   2                      case ANTENNA_I2C_GET_DPLY_2_COUNT:
  60   2                      case ANTENNA_I2C_GET_DPLY_3_COUNT:
  61   2                      case ANTENNA_I2C_GET_DPLY_4_COUNT:
  62   2                      case ANTENNA_I2C_GET_DPLY_1_TIME:
  63   2                      case ANTENNA_I2C_GET_DPLY_2_TIME:
  64   2                      case ANTENNA_I2C_GET_DPLY_3_TIME:
  65   2                      case ANTENNA_I2C_GET_DPLY_4_TIME:
  66   2                              g_uc_i2c_transferred_byte_in = ANTENNA_I2C_ONE_BYTE_RD;                 
  67   2                              l_uc_func_par |= 0x0E;  //write, read, and store        
  68   2                              break;
  69   2      
  70   2                      case ANTENNA_I2C_GET_TEMP:
  71   2                      case ANTENNA_I2C_GET_DPLY_STAT:
  72   2                              g_uc_i2c_transferred_byte_in = ANTENNA_I2C_TWO_BYTES_RD;                        
  73   2                              l_uc_func_par |= 0x0E;  //write, read, and store        
  74   2                              break;
  75   2      
  76   2                      default:
  77   2                              break;
  78   2              }
  79   1      
  80   1              //If there is data out bit, transmit I2C command
  81   1              if (l_uc_func_par & 0x04) 
  82   1                      l_us_error_code = i2cWrite();
  83   1      
  84   1              //If there is data in bit, retrieve I2C data
  85   1              if (l_uc_func_par & 0x02){
  86   2                      if (l_us_error_code == EC_SUCCESSFUL)
  87   2                              l_us_error_code = i2cWaitRead(TIME_DELAY_ANTENNA_I2C_CMD_WAITING_TENTH_MS,TIME_DELAY_ANTENNA_I2C_CMD_DE
             -LAY_TENTH_MS);
  88   2              }
  89   1      
  90   1              //If there is store bit, and the reading is successful, store the I2C data.
  91   1              if (!l_us_error_code && (l_uc_func_par & 0x08))
  92   1                      storeAntenna();
  93   1      
  94   1              #if (DEBUGGING_FEATURE == 1)
  95   1              //To end time recording
  96   1              if (l_uc_func_par & 0x01) endTiming();
  97   1              #endif
  98   1      
  99   1              return l_us_error_code;
 100   1      }
 101          
 102          //------------------------------------------------------------------------------------
 103          // All antenna I2C functions with parameters (except messaging)
 104          //------------------------------------------------------------------------------------
 105          // Function's test result: fully functional
 106          //------------------------------------------------------------------------------------
 107          #if (DEBUGGING_FEATURE == 1)
 108          unsigned short antennaI2CPar (unsigned char l_uc_antenna_board_addr, unsigned char l_uc_msg_out, unsigned 
             -char l_uc_msg_par, unsigned char l_uc_record_time_par)
 109          #else
              unsigned short antennaI2CPar (unsigned char l_uc_antenna_board_addr, unsigned char l_uc_msg_out, unsigned 
             -char l_uc_msg_par)
              #endif
 112          {
C51 COMPILER V9.02   LUXP_ANTENNA                                                          01/09/2014 12:21:16 PAGE 3   

 113   1              unsigned short l_us_error_code = EC_INIT;
 114   1      
 115   1              #if (DEBUGGING_FEATURE == 1)
 116   1              //To initialize time recording (if assigned)
 117   1              if (l_uc_record_time_par & 0x01) startTiming();
 118   1              #endif
 119   1      
 120   1              //To initialize and assign transmission parameters      
 121   1              g_uc_i2c_msg_out = l_uc_msg_out;
 122   1              g_uc_i2c_target = l_uc_antenna_board_addr;      
 123   1              g_uc_i2c_transferred_byte_out = ANTENNA_I2C_PAR_WR;
 124   1              g_uc_i2c_data_out[0] = l_uc_msg_out;    
 125   1              g_uc_i2c_data_out[1] = l_uc_msg_par;    
 126   1      
 127   1              //Transmit command      
 128   1              l_us_error_code = i2cWrite();
 129   1      
 130   1              #if (DEBUGGING_FEATURE == 1)
 131   1              //To end time recording
 132   1              if (l_uc_record_time_par & 0x01) endTiming();
 133   1              #endif
 134   1      
 135   1              return l_us_error_code;
 136   1      }
 137          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    287    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
