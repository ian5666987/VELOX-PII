C51 COMPILER V9.02   LUXP_RW                                                               01/09/2014 12:21:20 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE LUXP_RW
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE luxp_RW.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

*** WARNING C500 IN LINE 1 OF LUXP_RW.C: LICENSE ERROR (R20D: CONTENT ERROR IN FLF FILE)

   1          //------------------------------------------------------------------------------------
   2          // Luxp_RW.c
   3          //------------------------------------------------------------------------------------
   4          // Copyright (C) 2013 Nanyang Technological University.
   5          //
   6          // AUTH: IAN
   7          // DATE: 03 APR 2013
   8          //
   9          // The program Luxp_RW.c will be downloaded to the Pumpkin Motherboard with 
  10          // C8051F120 uC as part of the VELOX-P Pico-Satellite Flight Software. 
  11          //
  12          // This file contains all basic read and write functions of the Flight Software.
  13          //
  14          //------------------------------------------------------------------------------------
  15          // Overall functional test status
  16          //------------------------------------------------------------------------------------
  17          // Completely tested, all fully functional
  18          //
  19          //------------------------------------------------------------------------------------
  20          // Overall documentation status
  21          //------------------------------------------------------------------------------------
  22          // Completely documented, with partial long descriptions
  23          //------------------------------------------------------------------------------------
  24          
  25          //------------------------------------------------------------------------------------
  26          // List of functions                            | Test status                                   | Documentation
  27          //------------------------------------------------------------------------------------
  28          // i2cWrite                                                     | Tested, fully functional              | Complete, long
  29          // i2cRead                                                      | Tested, fully functional              | Complete, long
  30          // i2cWait                                                      | Tested, fully functional              | Complete, short
  31          //------------------------------------------------------------------------------------
  32          
  33          #include <luxp_RW.h>
  34          
  35          //------------------------------------------------------------------------------------
  36          // I2C Read and Write Functions
  37          //------------------------------------------------------------------------------------
  38          
  39          //------------------------------------------------------------------------------------
  40          // i2cWrite
  41          //------------------------------------------------------------------------------------
  42          //-------------------
  43          // Short Description
  44          //-------------------
  45          // This function will be writing data to I2C bus line as a master transmitter. 
  46          //
  47          //-------------------
  48          // Return Value 
  49          //-------------------
  50          // 1) l_us_error_code (unsigned char)
  51          //              a) EC_SUCCESSFUL - successful I2C Write.
  52          //              b) EC_I2C_WRITE_INCOMPLETE_TRANSMISSION - timeout after data transmission 
  53          //                 starts, before it is finished.
  54          //              c) EC_I2C_BUS_BUSY - timeout before data transmission, while waiting bus 
C51 COMPILER V9.02   LUXP_RW                                                               01/09/2014 12:21:20 PAGE 2   

  55          //                 to be freed.
  56          //              d) EC_I2C_ISR_SLAVE_ADDR_NACK - slave device does not acknowledge.
  57          //
  58          //-------------------
  59          // Parameters
  60          //-------------------
  61          // none
  62          //
  63          //------------------
  64          // Long Description
  65          //------------------
  66          // The function will first check whether the I2C bus line is busy or not before it 
  67          // starts to claim the I2C bus line for data wrting. 
  68          //
  69          // If the I2C bus line is found to be free, it will claim the line and start 
  70          // the writing data transfer. 
  71          //
  72          // If the bus is busy, it will wait until the bus is not busy or (to avoid indefinite 
  73          // waiting) until the timeout period of timeout ms occurs, determined by the 
  74          // value of I2C_BUSY_TIME_LIMIT * timer4 overflow period. 
  75          // 
  76          // If the I2C Bus is still busy after the timeout period, it will return error
  77          // code EC_I2C_BUS_BUSY, indicating that i2cWrite is failed due to busy bus. 
  78          // 
  79          // If the writing data transfer can be initialized, it will claim the bus to start
  80          // data transmission, mark the transfer as WRITE transfer, and start the I2C 
  81          // transmission timer.
  82          //
  83          // If I2C transmission timeout occurs, this function may return two possible values:
  84          // EC_I2C_ISR_SLAVE_ADDR_NACK, if the the timeout flag is set because slave device
  85          // does not send proper acknowledgement when its address is called, or
  86          // EC_I2C_WRITE_INCOMPLETE_TRANSMISSION, if the timeout flag occurs after timeout 
  87          // period is passed.
  88          //
  89          // If I2C transmission timeout does not occur, l_us_error_code will return 
  90          // EC_SUCCESSFUL, indicating that i2CWrite is successful.
  91          //------------------------------------------------------------------------------------
  92          // Function's test result: fully functional
  93          //------------------------------------------------------------------------------------
  94          unsigned short i2cWrite (void)
  95          {
  96   1              unsigned short l_us_error_code = EC_INIT;
  97   1              char SFRPAGE_SAVE = SFRPAGE;  
  98   1      
  99   1              SFRPAGE = SMB0_PAGE;
 100   1      
 101   1              //Check if I2C lines are busy
 102   1              l_us_error_code = i2cCheckLine();
 103   1              
 104   1              //If the I2C bus is freed before I2C busy timeout occurs
 105   1              if (!l_us_error_code){
 106   2                      //Claim I2C bus (set to busy)
 107   2                      g_us_i2c_flag |= I2C_FLAG_BUSY;
 108   2      
 109   2                      //Mark this transfer as a WRITE
 110   2                      g_us_i2c_flag &= ~I2C_FLAG_RW;
 111   2      
 112   2                      //Start transfer
 113   2                      STA = 1;
 114   2                      
 115   2                      //Start the transfer software's mechanism
 116   2                      l_us_error_code = i2cTransfer();
C51 COMPILER V9.02   LUXP_RW                                                               01/09/2014 12:21:20 PAGE 3   

 117   2              }
 118   1      
 119   1              //Return the SFR page before leaving the function
 120   1              SFRPAGE = SFRPAGE_SAVE;                         
 121   1              return l_us_error_code;
 122   1      }
 123          
 124          ////------------------------------------------------------------------------------------
 125          //// i2cRead
 126          ////------------------------------------------------------------------------------------
 127          //// This function will be reading data to I2C bus line as a master receiver. 
 128          ////
 129          ////-------------------
 130          //// Return Value 
 131          ////-------------------
 132          //// 1) l_us_error_code (unsigned char)
 133          ////            a) EC_SUCCESSFUL - successful I2C Read.
 134          ////            b) EC_I2C_READ_INCOMPLETE_TRANSMISSION - timeout after data transmission 
 135          ////               starts, before it is finished.
 136          //              c) EC_I2C_BUS_BUSY - timeout before data transmission, while waiting bus 
 137          //                 to be freed.
 138          //              d) EC_I2C_ISR_SLAVE_ADDR_NACK - slave device does not acknowledge.
 139          //
 140          //-------------------
 141          // Parameters
 142          //-------------------
 143          // none
 144          //
 145          //------------------
 146          // Long Description
 147          //------------------
 148          // The function will first check whether the I2C bus line is busy or not before it 
 149          // starts to claim the I2C bus line for data reading. 
 150          //
 151          // If the I2C bus line is found to be free, it will claim the line and start 
 152          // the reading data transfer. 
 153          //
 154          // If the bus is busy, it will wait until the bus is not busy or (to avoid indefinite 
 155          // waiting) until the timeout occurs, determined by the value of 
 156          // I2C_BUSY_TIME_LIMIT * timer4 overflow period. 
 157          // 
 158          // If the I2C bus is still busy after the timeout period, it will return error
 159          // code EC_I2C_BUS_BUSY, indicating that i2cRead is failed due to busy bus. 
 160          // 
 161          // If the reading data transfer can be initialized, it will claim the bus to start
 162          // data transmission, mark the transfer as READ transfer, and starts the reading 
 163          // data transfer. It will then wait until the reading data transfer finished or 
 164          // timeout to occur.
 165          // 
 166          // If I2C transmission timeout occurs, this function may return two possible values:
 167          // EC_I2C_ISR_SLAVE_ADDR_NACK, if the the timeout flag is set because slave device
 168          // does not send proper acknowledgement when its address is called, or
 169          // EC_I2C_READ_INCOMPLETE_TRANSMISSION, if the timeout flag occurs after timeout 
 170          // period is passed.
 171          //
 172          // If I2C transmission timeout does not occur, l_us_error_code will return 
 173          // EC_SUCCESSFUL, indicating that the i2cRead is successful.
 174          //------------------------------------------------------------------------------------
 175          // Function's test result: fully functional
 176          //------------------------------------------------------------------------------------
 177          unsigned short i2cRead (void)
 178          {       
C51 COMPILER V9.02   LUXP_RW                                                               01/09/2014 12:21:20 PAGE 4   

 179   1              unsigned short l_us_error_code = EC_INIT;
 180   1              char SFRPAGE_SAVE = SFRPAGE;  
 181   1      
 182   1              SFRPAGE = SMB0_PAGE;
 183   1      
 184   1              //Check if I2C lines are busy
 185   1              l_us_error_code = i2cCheckLine();
 186   1              
 187   1              //If the I2C bus is freed before I2C busy timeout occurs
 188   1              if (!l_us_error_code){
 189   2                      //Claim I2C bus (set to busy)           
 190   2                      g_us_i2c_flag |= I2C_FLAG_BUSY;
 191   2      
 192   2                      //Mark this transfer as a READ
 193   2                      g_us_i2c_flag |= I2C_FLAG_RW;
 194   2      
 195   2                      //Start transfer        
 196   2                      STA = 1;                                
 197   2      
 198   2                      //Start the transfer software's mechanism
 199   2                      l_us_error_code = i2cTransfer();
 200   2              }
 201   1      
 202   1              //Return the SFR page before leaving the function
 203   1              SFRPAGE = SFRPAGE_SAVE;         
 204   1              return l_us_error_code;
 205   1      }
 206          
 207          //------------------------------------------------------------------------------------
 208          // To check and wait i2c line status
 209          //------------------------------------------------------------------------------------
 210          unsigned short i2cCheckLine (void)
 211          {
 212   1              unsigned short l_us_error_code = EC_INIT;
 213   1      
 214   1              //Indicate that waiting for I2C bus to free is initiated, starts I2C busy timer.
 215   1              g_us_i2c_flag |= I2C_FLAG_BUSY_START;                                                   
 216   1              
 217   1              //Wait for bus to be free or I2C busy timeout to occur.
 218   1              while ((g_us_i2c_flag & I2C_FLAG_BUSY) && !(g_us_i2c_flag & I2C_FLAG_BUSY_TIMEOUT));    
 219   1              
 220   1              //Reset I2C_FLAG_BUSY_START value, stops I2C busy timer
 221   1              g_us_i2c_flag &= ~I2C_FLAG_BUSY_START;                                                  
 222   1              
 223   1              //If I2C busy timeout occurs
 224   1              if (g_us_i2c_flag & I2C_FLAG_BUSY_TIMEOUT){
 225   2                      //Ian (2012-05-15): here, we want to check whether the I2C is used in any other part of the code (busy)
 226   2                      //                                      thus, unlike in i2cTransfer, the I2C busy flag is not set free if it is not
 227   2                      //                                      found to be busy here.
 228   2                      //Reset I2C_FLAG_BUSY_TIMEOUT value
 229   2                      g_us_i2c_flag &= ~I2C_FLAG_BUSY_TIMEOUT;                        
 230   2      
 231   2                      //Set timeout error code before any data transmission
 232   2                      l_us_error_code = EC_I2C_BUS_BUSY;              
 233   2              }
 234   1              else l_us_error_code = EC_SUCCESSFUL;
 235   1      
 236   1              return l_us_error_code;                 
 237   1      }
 238          
 239          //------------------------------------------------------------------------------------
 240          // Common sequence between i2cWrite and i2cRead
C51 COMPILER V9.02   LUXP_RW                                                               01/09/2014 12:21:20 PAGE 5   

 241          //------------------------------------------------------------------------------------
 242          // Function's test result: fully functional
 243          //------------------------------------------------------------------------------------
 244          unsigned short i2cTransfer (void)
 245          {
 246   1              unsigned short l_us_error_code = EC_INIT;
 247   1      
 248   1              //Set I2C_FLAG_TRANSMISSION_START value, starts I2C transmission timer  
 249   1              g_us_i2c_flag |= I2C_FLAG_TRANSMISSION_START;                                                   
 250   1              
 251   1              //Wait for bus to be free or I2C transmission timeout to occur.
 252   1              while ((g_us_i2c_flag & I2C_FLAG_BUSY) && !(g_us_i2c_flag & I2C_FLAG_TRANSMISSION_TIMEOUT));    
 253   1              
 254   1              //Reset I2C_FLAG_TRANSMISSION_START value, stops I2C transmission timer
 255   1              g_us_i2c_flag &= ~I2C_FLAG_TRANSMISSION_START;                                                  
 256   1              
 257   1              //If I2C transmission timeout occurs
 258   1              if (g_us_i2c_flag & I2C_FLAG_TRANSMISSION_TIMEOUT){
 259   2                      //Reset I2C_FLAG_TRANSMISSION_TIMEOUT value
 260   2                      g_us_i2c_flag &= ~I2C_FLAG_TRANSMISSION_TIMEOUT;        
 261   2                                              
 262   2                      //Set I2C bus free
 263   2                      g_us_i2c_flag &= ~I2C_FLAG_BUSY;
 264   2      
 265   2                      //If the time out occurs because the flag is raised after slave device
 266   2                      //does not acknowledge its address
 267   2                      if (g_us_i2c_isr_error_code == EC_I2C_ISR_SLAVE_ADDR_NACK){     
 268   3                              //Set error code to indicate which slave device does not acknowledge
 269   3                              if (g_uc_i2c_target == ADCS_ADDR)
 270   3                                      l_us_error_code = EC_I2C_ISR_ADCS_SLAVE_ADDR_NACK;
 271   3                              else if (g_uc_i2c_target == PWRS_ADDR)
 272   3                                      l_us_error_code = EC_I2C_ISR_PWRS_SLAVE_ADDR_NACK;
 273   3                              else if (g_uc_i2c_target == IMC_ADDR)
 274   3                                      l_us_error_code = EC_I2C_ISR_IMC_SLAVE_ADDR_NACK;
 275   3                              else if (g_uc_i2c_target == ITC_ADDR)
 276   3                                      l_us_error_code = EC_I2C_ISR_ITC_SLAVE_ADDR_NACK;
 277   3                              else if (g_uc_i2c_target == PAYL_ADDR)
 278   3                                      l_us_error_code = EC_I2C_ISR_PAYL_SLAVE_ADDR_NACK;
 279   3                              else if (g_uc_i2c_target == RTC_ADDR)
 280   3                                      l_us_error_code = EC_I2C_ISR_RTC_SLAVE_ADDR_NACK;
 281   3                              else if (g_uc_i2c_target == GOM_ADDR)
 282   3                                      l_us_error_code = EC_I2C_ISR_GOM_PWRS_SLAVE_ADDR_NACK;
 283   3                              else if (g_uc_i2c_target == ANTENNA_1_ADDR)
 284   3                                      l_us_error_code = EC_I2C_ISR_ANTENNA_1_SLAVE_ADDR_NACK;
 285   3                              else if (g_uc_i2c_target == ANTENNA_2_ADDR)
 286   3                                      l_us_error_code = EC_I2C_ISR_ANTENNA_2_SLAVE_ADDR_NACK;
 287   3                              else l_us_error_code = g_us_i2c_isr_error_code;
 288   3                              //Reset I2C ISR error code
 289   3                              g_us_i2c_isr_error_code = EC_INIT;                                              
 290   3                      }
 291   2                      //Else if there is I2C communication fail for whatsoever reason, returns the error code
 292   2                      else if (g_us_i2c_isr_error_code == EC_I2C_ISR_COMMUNICATION_FAIL){
 293   3                              l_us_error_code = g_us_i2c_isr_error_code;
 294   3      
 295   3                              //Reset I2C ISR error code
 296   3                              g_us_i2c_isr_error_code = EC_INIT;                              
 297   3                      }
 298   2                      else{                                                                                                   
 299   3                              //If the transfer is 'write'
 300   3                              if (!(g_us_i2c_flag & I2C_FLAG_RW))
 301   3                                      //Set timeout error code after any data transmission
 302   3                                      l_us_error_code = EC_I2C_WRITE_INCOMPLETE_TRANSMISSION; 
C51 COMPILER V9.02   LUXP_RW                                                               01/09/2014 12:21:20 PAGE 6   

 303   3                              else
 304   3                                      //Set timeout error code after any data transmission
 305   3                                      l_us_error_code = EC_I2C_READ_INCOMPLETE_TRANSMISSION;
 306   3                      }
 307   2              }
 308   1      
 309   1              //If no timeout occurs, indicate that i2cWrite is successful
 310   1              else l_us_error_code = EC_SUCCESSFUL;                   
 311   1      
 312   1              return l_us_error_code;
 313   1      }
 314          
 315          //------------------------------------------------------------------------------------
 316          // To read from SMBus lines with some delays
 317          //------------------------------------------------------------------------------------
 318          // Function's test result: fully functional
 319          //------------------------------------------------------------------------------------
 320          unsigned short i2cWaitRead (unsigned char l_uc_delay_before_10thms, unsigned char l_uc_delay_after_10thms)
 321          {
 322   1              unsigned short l_us_error_code = EC_INIT;
 323   1      
 324   1              waitTenthMs(l_uc_delay_before_10thms); //is expected to be sufficient to get the data requested prepared        
 325   1              l_us_error_code = i2cRead();
 326   1              waitTenthMs(l_uc_delay_after_10thms); 
 327   1              
 328   1              return l_us_error_code;                 
 329   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    399    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
