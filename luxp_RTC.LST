C51 COMPILER V9.02   LUXP_RTC                                                              01/09/2014 12:21:20 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE LUXP_RTC
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE luxp_RTC.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

*** WARNING C500 IN LINE 1 OF LUXP_RTC.C: LICENSE ERROR (R20D: CONTENT ERROR IN FLF FILE)

   1          //------------------------------------------------------------------------------------
   2          // Luxp_RTC.c
   3          //------------------------------------------------------------------------------------
   4          // Copyright (C) 2013 Nanyang Technological University.
   5          //
   6          // AUTH: IAN
   7          // DATE: 03 APR 2013
   8          //
   9          // The program Luxp_RTC.c will be downloaded to the Pumpkin Motherboard with 
  10          // C8051F120 uC as part of the VELOX-P Pico-Satellite Flight Software. 
  11          //
  12          // This file contains all functions related to communication with
  13          // M41T81S real-time clock.
  14          //
  15          //------------------------------------------------------------------------------------
  16          // Overall functional test status
  17          //------------------------------------------------------------------------------------
  18          // Completely tested, all fully functional
  19          //
  20          //------------------------------------------------------------------------------------
  21          // Overall documentation status
  22          //------------------------------------------------------------------------------------
  23          // Minimally documented
  24          //------------------------------------------------------------------------------------
  25          
  26          //------------------------------------------------------------------------------------
  27          // List of functions                            | Test status                                   | Documentation
  28          //------------------------------------------------------------------------------------
  29          // rtcResetClock                                        | Tested, fully functional              | Minimum
  30          // rtcGetTime                                           | Tested, fully functional              | Minimum
  31          // rtcUpdateDate                                        | Tested, fully functional              | Average
  32          // rtcDateInit                                          | Tested, fully functional              | Minimum
  33          //------------------------------------------------------------------------------------
  34          
  35          #include <luxp_RTC.h>
  36          
  37          #if (RTC_CMD_ENABLE == 1)
  38          //-----------------------------------------------------------------------------
  39          // RTC Functions
  40          //-----------------------------------------------------------------------------
  41          
  42          //-----------------------------------------------------------------------------
  43          // To Initialize date on RTC
  44          //-----------------------------------------------------------------------------
  45          #if (DEBUGGING_FEATURE == 1)
  46          unsigned short rtcDateInit (unsigned char l_uc_record_time_par)
  47          #else
              unsigned short rtcDateInit (void)
              #endif
  50          {
  51   1              unsigned short l_us_error_code = EC_INIT;       
  52   1              unsigned char l_uc_i;
  53   1              
  54   1              #if (DEBUGGING_FEATURE == 1)
C51 COMPILER V9.02   LUXP_RTC                                                              01/09/2014 12:21:20 PAGE 2   

  55   1              //To initialize time recording (if assigned)
  56   1              if(l_uc_record_time_par & 0x01) startTiming();
  57   1              #endif
  58   1      
  59   1              //To initialize transmission parameters 
  60   1              g_uc_i2c_target = RTC_ADDR;
  61   1              g_uc_i2c_msg_out = RTC_I2C_DATE_INIT;
  62   1              g_uc_i2c_transferred_byte_out = RTC_I2C_WR;
  63   1      
  64   1              g_uc_i2c_data_out[0] = 0x00;                                            //Word Address Pointer
  65   1              g_uc_i2c_data_out[1] = oneHex2twoDec((unsigned char)str_sat_date.us_init_ms/10);        //Init ms
  66   1              g_uc_i2c_data_out[2] = oneHex2twoDec(str_sat_date.uc_init_s);                           //Init s
  67   1              g_uc_i2c_data_out[3] = oneHex2twoDec(str_sat_date.uc_init_min);                         //Init min
  68   1              g_uc_i2c_data_out[4] = oneHex2twoDec(str_sat_date.uc_init_hour);                        //Init hour
  69   1              g_uc_i2c_data_out[5] = oneHex2twoDec(str_sat_date.uc_init_day_of_week);         //Init day of week
  70   1              g_uc_i2c_data_out[6] = oneHex2twoDec(str_sat_date.uc_init_day_of_month);        //Init day of month
  71   1              g_uc_i2c_data_out[7] = oneHex2twoDec(str_sat_date.uc_init_month);                       //Init month
  72   1              g_uc_i2c_data_out[8] = oneHex2twoDec(str_sat_date.uc_init_year);                        //Init year
  73   1      
  74   1              for (l_uc_i = 9; l_uc_i < RTC_I2C_WR; l_uc_i++) g_uc_i2c_data_out[l_uc_i] = 0x00;
  75   1      
  76   1              //To transmit I2C command
  77   1              l_us_error_code = i2cWrite();   
  78   1      
  79   1              #if (DEBUGGING_FEATURE == 1)
  80   1              //To end time recording
  81   1              if (l_uc_record_time_par & 0x01) endTiming();
  82   1              #endif
  83   1      
  84   1              return l_us_error_code;
  85   1      }
  86          
  87          //-----------------------------------------------------------------------------
  88          // To get full set of time data from RTC
  89          //-----------------------------------------------------------------------------
  90          #if (DEBUGGING_FEATURE == 1)
  91          unsigned short rtcGetTime (unsigned char l_uc_record_time_par)
  92          #else
              unsigned short rtcGetTime (void)
              #endif
  95          {       
  96   1              unsigned short l_us_error_code = EC_INIT;
  97   1      
  98   1              #if (DEBUGGING_FEATURE == 1)
  99   1              //To initialize time recording (if assigned)
 100   1              if(l_uc_record_time_par & 0x01) startTiming();
 101   1              #endif
 102   1      
 103   1              //To initialize transmission parameters 
 104   1              g_uc_i2c_target = RTC_ADDR;
 105   1              g_uc_i2c_msg_out = RTC_I2C_GET_TIME;
 106   1              g_uc_i2c_transferred_byte_in = RTC_I2C_RD;
 107   1      
 108   1              //To read and store I2C data, if there is no error detected
 109   1              l_us_error_code = i2cRead();
 110   1              if (!l_us_error_code)
 111   1                      storeRTC();
 112   1      
 113   1              #if (DEBUGGING_FEATURE == 1)
 114   1              //To end time recording
 115   1              if (l_uc_record_time_par & 0x01) endTiming();
 116   1              #endif
C51 COMPILER V9.02   LUXP_RTC                                                              01/09/2014 12:21:20 PAGE 3   

 117   1      
 118   1              return l_us_error_code;
 119   1      }
 120          
 121          //-----------------------------------------------------------------------------
 122          // To update full set of date data from RTC
 123          //-----------------------------------------------------------------------------
 124          #if (DEBUGGING_FEATURE == 1)
 125          unsigned short rtcUpdateDate (unsigned char l_uc_update_day_of_week, unsigned char l_uc_update_day_of_mont
             -h, unsigned char l_uc_update_month, unsigned char l_uc_update_year, unsigned char l_uc_update_hour, unsigned char l_uc_u
             -pdate_min, unsigned char l_uc_update_s, unsigned char l_uc_record_time_par)
 126          #else
              unsigned short rtcUpdateDate (unsigned char l_uc_update_day_of_week, unsigned char l_uc_update_day_of_mont
             -h, unsigned char l_uc_update_month, unsigned char l_uc_update_year, unsigned char l_uc_update_hour, unsigned char l_uc_u
             -pdate_min, unsigned char l_uc_update_s)
              #endif
 129          {       
 130   1              unsigned short l_us_error_code = EC_INIT;
 131   1              unsigned char l_uc_i;
 132   1              
 133   1              #if (DEBUGGING_FEATURE == 1)
 134   1              //To initialize time recording (if assigned)
 135   1              if(l_uc_record_time_par & 0x01) startTiming();
 136   1              #endif
 137   1      
 138   1              //To initialize transmission parameters 
 139   1              g_uc_i2c_target = RTC_ADDR;
 140   1              g_uc_i2c_msg_out = RTC_I2C_UPDATE_DATE;
 141   1              g_uc_i2c_transferred_byte_out = RTC_I2C_WR;
 142   1      
 143   1              g_uc_i2c_data_out[0] = 0x00;                                                                    //Word Address Pointer
 144   1              g_uc_i2c_data_out[1] = 0x00;                                                                    //Update ms
 145   1              g_uc_i2c_data_out[2] = oneHex2twoDec(l_uc_update_s);                    //Update s
 146   1              g_uc_i2c_data_out[3] = oneHex2twoDec(l_uc_update_min);                  //Update min
 147   1              g_uc_i2c_data_out[4] = oneHex2twoDec(l_uc_update_hour);                 //Update hour
 148   1              g_uc_i2c_data_out[5] = oneHex2twoDec(l_uc_update_day_of_week);  //Update day of week
 149   1              g_uc_i2c_data_out[6] = oneHex2twoDec(l_uc_update_day_of_month); //Update day of month
 150   1              g_uc_i2c_data_out[7] = oneHex2twoDec(l_uc_update_month);                //Update month
 151   1              g_uc_i2c_data_out[8] = oneHex2twoDec(l_uc_update_year);                 //Update year
 152   1      
 153   1              for (l_uc_i = 9; l_uc_i < RTC_I2C_WR; l_uc_i++) g_uc_i2c_data_out[l_uc_i] = 0x00;
 154   1      
 155   1              //To transmit I2C command
 156   1              l_us_error_code = i2cWrite();   
 157   1      
 158   1              #if (DEBUGGING_FEATURE == 1)
 159   1              //To end time recording
 160   1              if (l_uc_record_time_par & 0x01) endTiming();
 161   1              #endif
 162   1      
 163   1              return l_us_error_code;
 164   1      }
 165          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    436    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.02   LUXP_RTC                                                              01/09/2014 12:21:20 PAGE 4   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
