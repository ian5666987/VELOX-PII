C51 COMPILER V9.02   LUXP_SD                                                               01/09/2014 12:21:20 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE LUXP_SD
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE luxp_SD.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

*** WARNING C500 IN LINE 1 OF LUXP_SD.C: LICENSE ERROR (R20D: CONTENT ERROR IN FLF FILE)

   1          //------------------------------------------------------------------------------------
   2          // Luxp_sd.c
   3          //------------------------------------------------------------------------------------
   4          // Copyright (C) 2013 Nanyang Technological University.
   5          //
   6          // AUTH: LEE ZHONG ZHENG
   7          //               IAN
   8          //               CHEW YAN CHONG
   9          // DATE: 03 APR 2013
  10          //
  11          // The program Luxp_sd.c will be downloaded to the Pumpkin Motherboard with 
  12          // C8051F120 uC as part of the VELOX-P Pico-Satellite Flight Software. 
  13          //
  14          // This file contains checking functions of the Flight Software
  15          //
  16          //------------------------------------------------------------------------------------
  17          // Overall functional test status
  18          //------------------------------------------------------------------------------------
  19          // Completely untested
  20          //
  21          //------------------------------------------------------------------------------------
  22          // Overall documentation status
  23          //------------------------------------------------------------------------------------
  24          // Minimally documented
  25          //------------------------------------------------------------------------------------
  26          
  27          #include <luxp_sd.h>
  28          
  29          #if (STORING_ENABLE == 1)
  30          short SPI0_failures = 0;
  31          short SPI0_timeout = 500; // default timeout
  32          unsigned char sd_crc7_ply = 0x12; // default value without initialization is chosen to be 0x12
  33          
  34          #define INIT_DELAY_10us_UNIT  1 //Delkin: 1 | SANDisk: 7000
  35          #define RNW_DELAY_10us_UNIT       1 //Delkin: 1 | SANDisk: 20
  36          #define STORE_DELAY_10us_UNIT 150 //Delkin: 150 | SANDisk: 200
  37          
  38          // private function, use SPI0_getPutChars instead ! warning this page does not need to set SFRPAGE = SPI0_
             -PAGE;
  39          // Min-max time: 0.005-0.05ms with SPI0_timeout = 25
  40          char SPI0_getPut(char* value) {
  41   1        short delay;
  42   1        // ---
  43   1        delay = 0;
  44   1        while (SPI0CFG & 0x80) // busy
  45   1          if (SPI0_timeout < ++delay) {
  46   2            ++SPI0_failures;
  47   2            return 0;
  48   2            break;
  49   2          }
  50   1        // ---
  51   1        SPI0DAT = *value; // send
  52   1        // ---
  53   1        delay = 0;
C51 COMPILER V9.02   LUXP_SD                                                               01/09/2014 12:21:20 PAGE 2   

  54   1        while (!SPIF)
  55   1          if (SPI0_timeout < ++delay) {
  56   2            ++SPI0_failures;
  57   2            break;
  58   2          }
  59   1        // ---
  60   1        *value = SPI0DAT; // recv
  61   1        SPIF = 0;
  62   1        return 1;
  63   1      }
  64          
  65          // function writes length chars from ptr to SPI and simultaneously writes reply into ptr
  66          void SPI0_putGetChars(void* buffer, short length) {
  67   1        short count;
  68   1        char* message = (char*) buffer;
  69   1        char SFRPAGE_SAVE = SFRPAGE;
  70   1        SFRPAGE = SPI0_PAGE;
  71   1        for (count = 0; count < length; ++count)
  72   1          SPI0_getPut(&message[count]); // return value is ignored
  73   1        SFRPAGE = SFRPAGE_SAVE;
  74   1      }
  75          
  76          // function writes length chars from ptr to SPI
  77          // the reply is dropped on purpose
  78          void SPI0_putChars(void* buffer, short length) {
  79   1        short count;
  80   1        char* message = (char*) buffer;
  81   1        char temp;
  82   1        char SFRPAGE_SAVE = SFRPAGE;
  83   1        SFRPAGE = SPI0_PAGE;
  84   1        for (count = 0; count < length; ++count) {
  85   2          temp = message[count];
  86   2          SPI0_getPut(&temp); // reply is discarded, return value is ignored
  87   2        }
  88   1        SFRPAGE = SFRPAGE_SAVE;
  89   1      }
  90          
  91          char SD_spiWriteByte(char value) {
  92   1        SPI0_putGetChars(&value, 1);
  93   1        return value;
  94   1      }
  95          
  96          unsigned char SD_spiReadByte() {
  97   1        unsigned char l_uc_spi_received_buffer = 0xff;
  98   1        SPI0_putGetChars(&l_uc_spi_received_buffer, 1);
  99   1        return l_uc_spi_received_buffer;
 100   1      }
 101          
 102          //Private function, only visible to SD data
 103          unsigned char SD_crc7Rotate(unsigned char crc, unsigned char nxt_byte) {
 104   1        unsigned char i, highest_bit;
 105   1        for (i = 0; i < 8; ++i) {
 106   2          highest_bit = crc >> 7;
 107   2          crc = (crc << 1) + ((nxt_byte >> (7 - i)) & 0x01);
 108   2          if (highest_bit)
 109   2            crc ^= sd_crc7_ply;
 110   2        }
 111   1        return crc;
 112   1      }
 113          
 114          unsigned char SD_crc7Update(void* msg, short length, unsigned char crc) {
 115   1        unsigned short i = 0;
C51 COMPILER V9.02   LUXP_SD                                                               01/09/2014 12:21:20 PAGE 3   

 116   1        char* message = (char*) msg;
 117   1        for (i = 0; i < length; ++i)
 118   1          crc = SD_crc7Rotate(crc, message[i]);
 119   1        return crc;
 120   1      }
 121          
 122          unsigned char SD_crc7Publish(unsigned char crc) {
 123   1        crc = SD_crc7Rotate(crc, 0);
 124   1        crc |= 0x01;
 125   1        return crc;
 126   1      }
 127          
 128          char SD_getUntil(unsigned char response, unsigned char flag) {
 129   1        unsigned char value;
 130   1        unsigned char retry = 0;
 131   1        for (retry = 0; retry < 5; ++retry){
 132   2          value = SD_spiReadByte();
 133   2          if ((value & flag) == response)
 134   2            return 1;
 135   2          waitUs(10);
 136   2        }
 137   1        return 0;
 138   1      }
 139          
 140          // return true if successful -> can trust value
 141          // return false if limit reached -> do not trust content value
 142          char SD_getUntilNot(unsigned char response, unsigned char flag, unsigned short delay_10us, unsigned char r
             -etry_limit, unsigned char* value_p) {
 143   1        unsigned char retry;
 144   1        unsigned short i;
 145   1        for (retry = 0; retry < retry_limit; ++retry) {
 146   2          *value_p = SD_spiReadByte();
 147   2          if ((*value_p & flag) != response)
 148   2            return 1;
 149   2          for (i = 0; i < delay_10us; ++i)
 150   2              waitUs(10);
 151   2        }
 152   1        return 0;
 153   1      }
 154          
 155          //expected minimum time: 0.03 + 0.01 + 0.005 = 0.045ms
 156          //expected maximum time: 0.3 + 0.3 + 0.05 = 0.65ms
 157          char SD_sendCommand(char command, unsigned long arg, unsigned char* value_p, unsigned short delay_ms) {
 158   1        char success;
 159   1        char array[6];
 160   1      
 161   1        array[0] = command | 0x40;
 162   1        memcpy(&array[1], &arg, 4);
 163   1        array[5] = SD_crc7Publish(SD_crc7Update(array, 5, 0)); // there should be a checksum here
 164   1      
 165   1        NSSMD0 = SD_ASSERT;
 166   1        SPI0_putChars(array, 6); //Min-max time: 0.03 - 0.3ms
 167   1        success = SD_getUntilNot(0xff, 0xff, delay_ms, 5, value_p); // we do not expect to get 0xff return here,
             - but other return is passed to the caller
 168   1        SD_spiReadByte(); //Min-max time: 0.005 - 0.05ms. Extra 8 clock for buffering, due to hardware synchroni
             -zation problem.Some SD cards will return two extra bytes, others are one byte
 169   1        NSSMD0 = SD_DEASSERT;
 170   1      
 171   1        return success;
 172   1      }
 173          
 174          char SD_commandUntil(char cmd, unsigned long arg, char response, unsigned short delay_10us) {
C51 COMPILER V9.02   LUXP_SD                                                               01/09/2014 12:21:20 PAGE 4   

 175   1        char success;
 176   1        unsigned char value;
 177   1        unsigned char retry;
 178   1        for (retry = 0; retry < 3; ++retry) { //Works on the 1st trial most of the time. Set the number of retry
             - to be 5 here.
 179   2          success = SD_sendCommand(cmd, arg, &value, delay_10us);
 180   2          if (success && value == response)
 181   2            return 1;
 182   2          waitUs(10); //ian (2013-04-02): 10us works really well, gives about 10us delay here
 183   2        }
 184   1        return 0;
 185   1      }
 186          
 187          void SD_writeBlockData(void* buffer, short length) {
 188   1        short counter;
 189   1        SD_spiWriteByte(0xfe); // Send start block token 0xfe (0x11111110) //Min-max time: 0.005 - 0.05ms
 190   1        SPI0_putChars(buffer, length);
 191   1        for (counter = length; counter < SD_CARD_BUFFER_SIZE; ++counter)
 192   1          SD_spiWriteByte(0x00); // Min-max time: 2.56 - 25.6ms
 193   1        SD_spiWriteByte(0xff); // transmit dummy CRC (16-bit), CRC is ignored here
 194   1        SD_spiWriteByte(0xff); // Min-max time: 0.01 - 0.1ms
 195   1      }
 196          
 197          void SD_readBlockData(void* buffer, short length) {
 198   1        short counter;
 199   1        memset(buffer, 0xff, length);
 200   1        SPI0_putGetChars(buffer, length); //read 512 bytes
 201   1        for (counter = length; counter < SD_CARD_BUFFER_SIZE; counter++)
 202   1          SD_spiReadByte(); //Min-max time: 2.56 - 25.6ms
 203   1        SD_spiReadByte(); // receive incoming CRC (16-bit), CRC is ignored here
 204   1        SD_spiReadByte();
 205   1        SD_spiReadByte(); // Extra 8 clock for buffering. Min-max time: 0.015 - 0.15ms
 206   1      }
 207          
 208          void SD_eraseBlockData() {
 209   1        short counter;
 210   1        SD_spiWriteByte(0xfe); // Send start block token 0xfe (0x11111110) //Min-max time: 0.005 - 0.05ms
 211   1        for (counter = 0; counter < SD_CARD_BUFFER_SIZE; ++counter)
 212   1          SD_spiWriteByte(0xff); // Min-max time: 2.56 - 25.6ms
 213   1        SD_spiWriteByte(0xff); // transmit dummy CRC (16-bit), CRC is ignored here
 214   1        SD_spiWriteByte(0xff); // Min-max time: 0.01 - 0.1ms
 215   1      }
 216          
 217          //------------------------------------------------------------------------------------
 218          // SD_Card_Initialization
 219          //------------------------------------------------------------------------------------
 220          unsigned short initSD (void)
 221          {
 222   1        unsigned char success = 1;
 223   1        unsigned char dummy_value;
 224   1        char array[10];
 225   1        memset(array, 0xff, sizeof array);
 226   1        if (!SD_sendCommand(SD_SEND_STATUS, 0, &dummy_value, 1)) { //Min-max time: 0.045-0.65ms ian (2013-05-29)
             -: there was a silly mistake here =.=' -> SD_sendCommand(SD_SEND_STATUS, 0) is changed to !SD_sendCommand(SD_SEND_STATUS,
             - 0)
 227   2          SPI0_putChars(array, 10); // send 10 bytes of data to make sure that SD card is receiving. Min-max tim
             -e: 0.05-0.5ms
 228   2          success = SD_commandUntil(SD_GO_IDLE_STATE, 0, 0x01, INIT_DELAY_10us_UNIT); // ian (2013-07-22): first
             - initialization time has to be set higher even 42ms is not enough for SANDisk SD card! Set as 70ms x 9 = 630ms for safet
             -y reason. Ian (2012-05-15): 0x01 is the expected return from SD card when it receives idle state command.
 229   2          if (!success)
 230   2            return EC_SD_CARD_INITIALIZATION_ERROR;
C51 COMPILER V9.02   LUXP_SD                                                               01/09/2014 12:21:20 PAGE 5   

 231   2          SPI0_putChars(array, 2); // Flushing, to make sure SD card is clear to receive command. Min-max time: 
             -0.01 - 0.1ms
 232   2          success = SD_commandUntil(SD_SEND_OP_COND, 0, 0x00, 1);
 233   2        }  
 234   1        return success ? EC_SUCCESSFUL : EC_SD_CARD_INITIALIZATION_ERROR;
 235   1      }
 236          
 237          //------------------------------------------------------------------------------------
 238          //Function: to write to a single block of SD card
 239          //Arguments: none
 240          //return: unsigned char; will be 0 if no error,
 241          // otherwise the response byte will be sent
 242          //------------------------------------------------------------------------------------
 243          #define SD_CARD_COMMAND_SHIFT_BIT  9
 244          unsigned short sdWriteSingleBlock(unsigned long block, void* buffer, unsigned short length)
 245          {
 246   1        unsigned char value;
 247   1        char success;
 248   1        unsigned short ec_init;
 249   1        ec_init = initSD();
 250   1        if (ec_init != EC_SUCCESSFUL) //ian (2013-04-09): add this. //Min-max time: 0.16 - 10.55ms
 251   1          return ec_init;
 252   1        success = SD_commandUntil(SD_WRITE_SINGLE_BLOCK, block << SD_CARD_COMMAND_SHIFT_BIT, 0, RNW_DELAY_10us_U
             -NIT); //ian 2013-07-22: 70us microsecond x 5 retry is minimum delay for SANDisk. Put 200us x 9 = 1.8ms for safety reason
 253   1        if (!success) // sdSendCommand shall return non-zero value when there is an error by hardware design.. c
             -heck for SD status: 0x00 - OK (No flags set). // write a Block command. Min-max time: 0.045-0.65ms
 254   1          return EC_SD_CARD_WRITE_BLOCK_ERROR;
 255   1        NSSMD0 = SD_ASSERT;
 256   1        SD_writeBlockData(buffer, length);
 257   1        if (!SD_getUntil(0x05, 0x1f)) //response= 0xXXX0AAA1; AAA='010' - data accepted, //AAA='101'-data reject
             -ed due to CRC error. //AAA='110'-data rejected due to write error
 258   1          return EC_SD_CARD_WRITE_BLOCK_ERROR;
 259   1        if (!SD_getUntilNot(0x00, 0xff, STORE_DELAY_10us_UNIT, 100, &value)) // we are waiting for any non zero 
             -reply from SD card
 260   1          return EC_SD_CARD_WRITE_BLOCK_ERROR;
 261   1        SD_spiWriteByte(0xff); // Extra 8 clock for buffering. Min-max time: 0.005 - 0.05ms
 262   1        NSSMD0 = SD_DEASSERT;
 263   1        return EC_SUCCESSFUL;
 264   1      }
 265          
 266          //******************************************************************
 267          //Function: to read a single block from SD card
 268          //Arguments: none
 269          //return: unsigned char; will be 0 if no error,
 270          // otherwise the response byte will be sent
 271          //******************************************************************
 272          unsigned short sdReadSingleBlock(unsigned long block)
 273          {
 274   1        char success;
 275   1        unsigned short ec_init;
 276   1        ec_init = initSD();
 277   1        if (ec_init != EC_SUCCESSFUL) //ian (2013-04-09): add this. //Min-max time: 0.16 - 10.55ms
 278   1          return ec_init;
 279   1        success = SD_commandUntil(SD_READ_SINGLE_BLOCK, block << SD_CARD_COMMAND_SHIFT_BIT, 0, RNW_DELAY_10us_UN
             -IT); //ian 2013-07-22: 70us microsecond x 5 retry is minimum delay for SANDisk. Put 200us x 9 = 1.8ms for safety reason
 280   1        if (!success) // read a Block command. Min-max time: 0.045-0.65ms. check for SD status: 0x00 - OK (No fl
             -ags set)
 281   1          return EC_SD_CARD_READ_BLOCK_ERROR;
 282   1        NSSMD0 = SD_ASSERT;
 283   1        if (!SD_getUntil(0xfe, 0xff)) // 0xfe is the start block token expected to be received from SD card when
             - it is ready to send one block of data.
 284   1          return EC_SD_CARD_READ_BLOCK_ERROR;
C51 COMPILER V9.02   LUXP_SD                                                               01/09/2014 12:21:20 PAGE 6   

 285   1        SD_readBlockData(g_uc_sd_data_buffer, SD_CARD_BUFFER_SIZE);
 286   1        NSSMD0 = SD_DEASSERT;
 287   1        return EC_SUCCESSFUL;
 288   1      }
 289          
 290          #if (OBDH_CMD_ENABLE == 1)
 291          //------------------------------------------------------------------------------------
 292          //Function: to erase single block in SD card
 293          //Arguments: none
 294          //return: unsigned char; will be 0 if no error,
 295          // otherwise the response byte will be sent
 296          //------------------------------------------------------------------------------------
 297          unsigned short sdEraseSingleBlock(unsigned long block)
 298          {
 299   1        unsigned char value;
 300   1        char success;
 301   1        unsigned short ec_init;
 302   1        ec_init = initSD();
 303   1        if (ec_init != EC_SUCCESSFUL) //ian (2013-04-09): add this. //Min-max time: 0.16 - 10.55ms
 304   1          return ec_init;
 305   1        success = SD_commandUntil(SD_WRITE_SINGLE_BLOCK, block << SD_CARD_COMMAND_SHIFT_BIT, 0, RNW_DELAY_10us_U
             -NIT); //ian 2013-07-22: 70us microsecond x 5 retry is minimum delay for SANDisk. Put 200us x 9 = 1.8ms for safety reason
 306   1        if (!success) // sdSendCommand shall return non-zero value when there is an error by hardware design.. c
             -heck for SD status: 0x00 - OK (No flags set). // write a Block command. Min-max time: 0.045-0.65ms
 307   1          return EC_SD_CARD_ERASE_BLOCK_ERROR;
 308   1        NSSMD0 = SD_ASSERT;
 309   1        SD_eraseBlockData();
 310   1        if (!SD_getUntil(0x05, 0x1f)) //response= 0xXXX0AAA1; AAA='010' - data accepted, //AAA='101'-data reject
             -ed due to CRC error. //AAA='110'-data rejected due to write error
 311   1          return EC_SD_CARD_ERASE_BLOCK_ERROR;
 312   1        if (!SD_getUntilNot(0x00, 0xff, STORE_DELAY_10us_UNIT, 100, &value)) // we are waiting for any non zero 
             -reply from SD card
 313   1          return EC_SD_CARD_ERASE_BLOCK_ERROR;
 314   1        SD_spiWriteByte(0xff); // Extra 8 clock for buffering. Min-max time: 0.005 - 0.05ms
 315   1        NSSMD0 = SD_DEASSERT;
 316   1        return EC_SUCCESSFUL;
 317   1      }
 318          #endif
 319          #endif
 320          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1602    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5     121
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
